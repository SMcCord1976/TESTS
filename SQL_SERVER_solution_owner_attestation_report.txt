SELECT DISTINCT @@SERVERNAME AS ServerName
	, UserName AS LoginName
	, UserType AS LoginType
	, DatabaseUserName
	, ROLE
	, PermissionType
	, PermissionState
	, DatabaseName = db_name()
	, DefaultSchema
	, SecurableName
	, SecurableType
	, ColumnName
--  , item -- used to check consistencies in each subquery
INTO spc_dba_utilities..permission_audit_temp
FROM (
	SELECT UserName = princ.name
		, UserType = CASE princ.type
			WHEN 'S'
				THEN 'SQL Authenticated USER'
			WHEN 'U'
				THEN 'Windows Authenticated USER'
			WHEN 'G'
				THEN 'Windows GROUP'
			WHEN 'A'
				THEN 'Application ROLE'
			WHEN 'R'
				THEN 'Database ROLE'
			WHEN 'K'
				THEN 'User mapped to ASYMMETRIC KEY'
			WHEN 'X'
				THEN 'External GROUP from Microsoft Entra ID'
			WHEN 'E'
				THEN 'External USER from Microsoft Entra ID'
			WHEN 'C'
				THEN 'User mapped to a CERTIFICATE'
			ELSE princ.type
			END
		, DatabaseUserName = princ.name
		, ROLE = princ.name
		, PermissionType = PERM.permission_name
		, PermissionState = PERM.state_desc
		, DefaultSchema = princ.default_schema_name
		, SecurableType = obj.type_desc
		, SecurableName = coalesce(OBJECT_NAME(PERM.major_id), db_name())
		, ColumnName = col.name
		, 1 AS item
	FROM sys.database_principals princ
	LEFT JOIN sys.login_token ulogin
		ON princ.sid = ulogin.sid
	LEFT JOIN sys.database_permissions PERM
		ON PERM.grantee_principal_id = princ.principal_id
	LEFT JOIN sys.columns col
		ON col.object_id = PERM.major_id
			AND col.column_id = PERM.minor_id
	LEFT JOIN sys.objects obj
		ON PERM.major_id = obj.object_id
	--WHERE PERM.permission_name <> 'CONNECT'
	
	UNION
	
	SELECT UserName = memberprinc.name
		, UserType = CASE memberprinc.type
			WHEN 'S'
				THEN 'SQL Authenticated USER'
			WHEN 'U'
				THEN 'Windows Authenticated USER'
			WHEN 'G'
				THEN 'Windows GROUP'
			WHEN 'A'
				THEN 'Application ROLE'
			WHEN 'R'
				THEN 'Database ROLE'
			WHEN 'K'
				THEN 'User mapped to ASYMMETRIC KEY'
			WHEN 'X'
				THEN 'External GROUP from Microsoft Entra ID'
			WHEN 'E'
				THEN 'External USER from Microsoft Entra ID'
			WHEN 'C'
				THEN 'User mapped to a CERTIFICATE'
			ELSE memberprinc.type
			END
		, DatabaseUserName = memberprinc.name
		, ROLE = roleprinc.name
		, PermissionType = PERM.permission_name
		, PermissionState = PERM.state_desc
		, DefaultSchema = roleprinc.default_schema_name
		, SecurableType = obj.type_desc
		, SecurableName = db_name()
		, ColumnName = col.name
		, 2 AS item
	FROM sys.database_role_members members
	INNER JOIN sys.database_principals roleprinc
		ON roleprinc.principal_id = members.role_principal_id
	INNER JOIN sys.database_principals memberprinc
		ON memberprinc.principal_id = members.member_principal_id
	LEFT JOIN sys.login_token ulogin
		ON memberprinc.sid = ulogin.sid
	LEFT JOIN sys.database_permissions PERM
		ON PERM.grantee_principal_id = roleprinc.principal_id
	LEFT JOIN sys.columns col
		ON col.object_id = PERM.major_id
			AND col.column_id = PERM.minor_id
	LEFT JOIN sys.objects obj
		ON PERM.major_id = obj.object_id
	
	UNION
	
	SELECT UserName = roleprinc.name
		, UserType = CASE roleprinc.type
			WHEN 'S'
				THEN 'SQL Authenticated USER'
			WHEN 'U'
				THEN 'Windows Authenticated USER'
			WHEN 'G'
				THEN 'Windows GROUP'
			WHEN 'A'
				THEN 'Application ROLE'
			WHEN 'R'
				THEN 'Database ROLE'
			WHEN 'K'
				THEN 'User mapped to ASYMMETRIC KEY'
			WHEN 'X'
				THEN 'External GROUP from Microsoft Entra ID'
			WHEN 'E'
				THEN 'External USER from Microsoft Entra ID'
			WHEN 'C'
				THEN 'User mapped to a CERTIFICATE'
			ELSE roleprinc.type
			END
		, DatabaseUserName = roleprinc.name
		, ROLE = roleprinc.name
		, PermissionType = PERM.permission_name
		, PermissionState = PERM.state_desc
		, DefaultSchema = roleprinc.default_schema_name
		, SecurableType = obj.type_desc
		, SecurableName = coalesce(OBJECT_NAME(PERM.major_id), db_name())
		, ColumnName = col.name
		, 3 AS item
	FROM sys.database_principals roleprinc
	LEFT JOIN sys.database_permissions PERM
		ON PERM.grantee_principal_id = roleprinc.principal_id
	LEFT JOIN sys.columns col
		ON col.object_id = PERM.major_id
			AND col.column_id = PERM.minor_id
	LEFT JOIN sys.objects obj
		ON obj.object_id = PERM.major_id
	
	UNION
	
	SELECT UserName = princ.name collate Latin1_General_CI_AS
		, UserType = CASE princ.type
			WHEN 'S'
				THEN 'SQL Authenticated USER'
			WHEN 'U'
				THEN 'Windows Authenticated USER'
			WHEN 'G'
				THEN 'Windows GROUP'
			WHEN 'A'
				THEN 'Application ROLE'
			WHEN 'R'
				THEN 'Database ROLE'
			WHEN 'K'
				THEN 'User mapped to ASYMMETRIC KEY'
			WHEN 'X'
				THEN 'External GROUP from Microsoft Entra ID'
			WHEN 'E'
				THEN 'External USER from Microsoft Entra ID'
			WHEN 'C'
				THEN 'User mapped to a CERTIFICATE'
			ELSE princ.type
			END
		, DatabaseUserName = princ.name collate Latin1_General_CI_AS
		, ROLE = CASE 
			WHEN logins.sysadmin = 1
				THEN 'sysadmin'
			WHEN logins.securityadmin = 1
				THEN 'securityadmin'
			WHEN logins.serveradmin = 1
				THEN 'serveradmin'
			WHEN logins.setupadmin = 1
				THEN 'setupadmin'
			WHEN logins.processadmin = 1
				THEN 'processadmin'
			WHEN logins.diskadmin = 1
				THEN 'diskadmin'
			WHEN logins.dbcreator = 1
				THEN 'dbcreator'
			WHEN logins.bulkadmin = 1
				THEN 'bulkadmin'
			ELSE 'Public'
			END
		, PermissionType = PERM.permission_name
		, PermissionState = 'GRANT'
		, DefaultSchema = NULL
		, SecurableType = NULL
		, SecurableName = princ.default_database_name
		, ColumnName = NULL
		, 4 AS item
	FROM sys.server_principals princ
	INNER JOIN sys.syslogins logins
		ON princ.sid = logins.sid
	LEFT JOIN sys.database_permissions PERM
		ON PERM.grantee_principal_id = princ.principal_id
	WHERE princ.type <> 'R'
		--AND princ.name NOT LIKE '#%'
		--AND princ.NAME != '117968-a1'
		--AND princ.NAME != '117962-a1'
		--AND princ.NAME != 'sa'
		--AND princ.NAME != 'idera_dm_admin'
		--AND princ.NAME != 'cms_admin'
		--AND princ.NAME NOT LIKE 'NT%SERVICE%'
	) P
--WHERE (
--		ROLE <> 'Public'
--		OR SecurableName = db_name()
--		)
ORDER BY P.DatabaseUserName
	, P.SecurableName
	, P.ColumnName
	, P.PermissionType
	, P.PermissionState
	, P.DefaultSchema
	, P.SecurableType


/***********************************************************************************************************************************************/

--drop table spc_dba_utilities..permission_audit_temp



UPDATE spc_dba_utilities..permission_audit_temp
SET PermissionType = 'EXPLICIT SERVER INSTANCE LEVEL'
WHERE ROLE IN ('sysadmin','superuser','securityadmin','setupadmin','serveradmin','processadmin','diskadmin','dbcreator','bulkadmin')
AND PermissionType IS NULL
GO
UPDATE spc_dba_utilities..permission_audit_temp
SET PermissionType = 'EXPLICIT DATABASE LEVEL'
WHERE ROLE IN ('db_owner','db_datareader','db_datawriter','db_sp_executor','db_ddladmin','db_backupoperator','db_accessadmin','db_denydatawriter','db_denydatareader','db_superuser','db_github_promotion')
AND PermissionType IS NULL
GO
UPDATE spc_dba_utilities..permission_audit_temp 
SET PermissionType = 'EXPLICIT DATABASE SCHEMA LEVEL: ' + PermissionType
WHERE DefaultSchema IS NOT NULL
AND DefaultSchema NOT IN ('dbo','guest')
GO
UPDATE spc_dba_utilities..permission_audit_temp 
SET PermissionType = 'EXPLICIT DATABASE SCHEMA LEVEL: ' + Role
WHERE PermissionType IS NULL
AND LoginName in (select LoginName from spc_dba_utilities..permission_audit_temp where PermissionType LIKE 'EXPLICIT DATABASE SCHEMA%')
GO
UPDATE spc_dba_utilities..permission_audit_temp 
SET PermissionType = 'DEFAULT SERVER INSTANCE LEVEL.  NO USER MAPPING TO ' + DatabaseName
WHERE PermissionType IS NULL
GO


/* REPORT LOGINS THAT ARE PRESENT AT THE INSTANCE LEVEL
   BUT ARE NOT MAPPED TO THE DATABASE BEING SCRUTINIZED
   AND HAVE NO IMPLIED ACCESS TO THE DATABASE OR ITS OBJECTS */

select 
ServerName
, LoginType
, LoginName
, DatabaseUserName
, PermissionType
--, Role
--, DatabaseName
--, DefaultSchema
from spc_dba_utilities..permission_audit_temp 
where PermissionType LIKE 'DEFAULT SERVER INSTANCE LEVEL%'
and LoginType != 'Database ROLE' --Exclude database roles
and LoginType != 'User mapped to a CERTIFICATE' --Exclude certificates
and LoginName not in ('dbo','sa','guest','sys','117968-a1','117962-a1','idera_dm_admin','cms_admin') --Exclude default dbo user, default sa account, default guest account, default sys account, DBA administrative accounts, IDERA DM service account, Central Management Server service account
and LoginName not like '##%' -- Exclude system accounts
order by LoginName, PermissionType
go


/* REPORT LOGINS THAT ARE PRESENT AT THE INSTANCE LEVEL
   BUT ARE NOT MAPPED AT THE DATABASE LEVEL
   HOWEVER THEY *DO* HAVE IMPLIED ACCESS TO THE DATABASE BEING SCRUTINIZED */


select 
ServerName
, LoginType
, LoginName
, DatabaseUserName
, PermissionType
, Role
, DatabaseName
, DefaultSchema
from spc_dba_utilities..permission_audit_temp 
where PermissionType LIKE ('EXPLICIT SERVER INSTANCE LEVEL%')
and LoginType != 'Database ROLE' --Exclude database roles
and LoginName not in ('dbo','sa','117968-a1','117962-a1','idera_dm_admin','cms_admin') --Exclude default dbo user, default sa account, DBA administrative accounts, IDERA DM service account, Central Management Server service account
order by LoginName, PermissionType
go


/* REPORT DATABASE USERS THAT ARE PRESENT WITHIN THE DATABASE BEING SCRUTINIZED
   AND HAVE ACCESS THAT ALIGNS WITH THE DATABASE ROLE TO WHICH THEY BELONG */

select
ServerName
, LoginType
, LoginName
, DatabaseUserName
, PermissionType
, DatabaseName
, Role
from spc_dba_utilities..permission_audit_temp 
where PermissionType LIKE ('EXPLICIT DATABASE LEVEL%')
and LoginType != 'Database ROLE' --Exclude database roles
and LoginName not in ('dbo','sa','117968-a1','117962-a1','idera_dm_admin','cms_admin') --Exclude default dbo user, default sa account, DBA administrative accounts, IDERA DM service account, Central Management Server service account
order by LoginName, PermissionType
go


/* REPORT DATABASE USERS THAT ARE PRESENT WITHIN THE DATABASE BEING SCRUTINIZED
   BUT DO NOT BELONG TO A DATABASE ROLE
   RATHER, THEY HAVE BEEN GRANTED THE PERMISSION ILLUSTRATED TO THE DATABASE SCHEMA NOTED*/


select 
ServerName
, LoginType
, LoginName
, DatabaseUserName
, PermissionType
--, Role
, DatabaseName
, DefaultSchema
from spc_dba_utilities..permission_audit_temp 
where PermissionType LIKE ('EXPLICIT DATABASE SCHEMA LEVEL:%')
and LoginType != 'Database ROLE' --Exclude database roles
and LoginName not in ('dbo','sa','117968-a1','117962-a1','idera_dm_admin','cms_admin') --Exclude default dbo user, default sa account, DBA administrative accounts, IDERA DM service account, Central Management Server service account
and DefaultSchema NOT IN ('dbo','guest') --Exclude default schemas
order by LoginName, PermissionType
go
