USE [msdb]
GO

/****** Object:  Job [[DBA] - Missing Index Report - TEMPLATE]    Script Date: 12/31/2024 12:52:05 PM ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Uncategorized (Local)]]    Script Date: 12/31/2024 12:52:06 PM ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'[DBA] - Missing Index Report - TEMPLATE', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'Identify potential missing indexes on Linked Server databases.

Ensure that the Linked Server Property "Enable Promotion of Distributed transaction is set to FALSE".', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'sa', @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Generate and send report]    Script Date: 12/31/2024 12:52:07 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Generate and send report', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'/**************************************************/
/*

VARIABLES PER SERVER:

	CMS_SERVER_NAME_DATABASE_NAME (for Azure SQL Databases)
	CMS_SERVER_NAME (for full featured SQL Server Databases)
	DATABASE_NAME
	@ServerName1 = ''[SERVER_NAME]''

*/
/**************************************************/


--Initialize Run
DROP TABLE IF EXISTS #TempMissingIndexes_DATABASE_NAME

CREATE TABLE #TempMissingIndexes_DATABASE_NAME
( [ServerName] [varchar](max),
  [DatabaseName] [varchar](max),
  [Avg_Estimated_Impact]  [varchar](max),
  [Last_User_Seek]  [varchar](max),
  [Object_Name] [varchar](max),
  [Index_Create_Statement] [varchar](max),
  [QueryDate] [varchar](max)
)


--Identify Unused Indexes from Linked Server Object database

DECLARE @Script nvarchar(max) = 

N''USE [DATABASE_NAME];

SELECT 
	@@SERVERNAME AS ''''ServerName'''',
	DB_NAME() AS ''''DatabaseName'''',
	dm_migs.avg_user_impact*(dm_migs.user_seeks+dm_migs.user_scans) Avg_Estimated_Impact,
	dm_migs.last_user_seek AS Last_User_Seek,
	OBJECT_NAME(dm_mid.OBJECT_ID,dm_mid.database_id) AS [Object_Name],
	''''CREATE INDEX [IX_'''' + OBJECT_NAME(dm_mid.OBJECT_ID,dm_mid.database_id) + ''''_''''
	+ REPLACE(REPLACE(REPLACE(ISNULL(dm_mid.equality_columns,''''''''),'''', '''',''''_''''),''''['''',''''''''),'''']'''','''''''') 
	+ CASE
	WHEN dm_mid.equality_columns IS NOT NULL 
	AND dm_mid.inequality_columns IS NOT NULL THEN ''''_''''
	ELSE ''''''''
	END
	+ REPLACE(REPLACE(REPLACE(ISNULL(dm_mid.inequality_columns,''''''''),'''', '''',''''_''''),''''['''',''''''''),'''']'''','''''''')
	+ '''']''''
	+ '''' ON '''' + dm_mid.statement
	+ '''' ('''' + ISNULL (dm_mid.equality_columns,'''''''')
	+ CASE WHEN dm_mid.equality_columns IS NOT NULL AND dm_mid.inequality_columns 
	IS NOT NULL THEN '''','''' ELSE
	'''''''' END
	+ ISNULL (dm_mid.inequality_columns, '''''''')
	+ '''')''''
	+ ISNULL ('''' INCLUDE ('''' + dm_mid.included_columns + '''')'''', '''''''') AS Index_Create_Statement,
	getdate() AS QueryDate
FROM sys.dm_db_missing_index_groups dm_mig
	INNER JOIN sys.dm_db_missing_index_group_stats dm_migs
		ON dm_migs.group_handle = dm_mig.index_group_handle
	INNER JOIN sys.dm_db_missing_index_details dm_mid
		ON dm_mig.index_handle = dm_mid.index_handle
	WHERE dm_mid.database_ID = DB_ID()
ORDER BY Avg_Estimated_Impact DESC
''

INSERT INTO #TempMissingIndexes_DATABASE_NAME
EXECUTE (@Script) AT CMS_SERVER_NAME



/* Count the number of unused indexes identified */


DECLARE @CountValue INT
SELECT @CountValue = COUNT(*)
FROM #TempMissingIndexes_DATABASE_NAME

--PRINT @CountValue

IF (@CountValue = 0)
BEGIN 

--Declare variables
DECLARE @ServerName1 VARCHAR(255)
DECLARE @DatabaseName1 VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)
--DECLARE @xml NVARCHAR(MAX) --XML VARIABLE DECLARED IN ACCOUNTS DETECTED SECTION
DECLARE @blankbody NVARCHAR(MAX)

--Set variables
SET @ServerName1 = ''['' + @@SERVERNAME + '']''
SET @DatabaseName1 = ''.['' + DB_NAME() + '']''
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - Potential Missing Index Report ''
SET @CombinedSubject = @MailSubject + @ServerName1 + @DatabaseName1


SET @blankbody = ''NO MISSING INDEXES DETECTED ON THE DATABASE

~*~NFAR~*~''

--Trigger the email 
EXEC msdb.dbo.sp_send_dbmail
	@profile_name = ''SQLServer''
--,	@recipients = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com''
,	@recipients = ''stephenm@consumerdirectcare.com''
,	@subject = @CombinedSubject
,	@body = @blankbody
,   @body_format = ''HTML'';

END

ELSE 

BEGIN

-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= ''
<html>
<head> <style>
 th.fitwidth {
	width: 1px;
	white-space: nowrap;
	}
 #g {color: green;}
 #r {color: red;}
 #orng {color: orange;}
 #odd {background-color: lightgrey}
</style> </head>'';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);


DECLARE @recipients VARCHAR(MAX) = ''stephenm@consumerdirectcare.com; stephenm@consumerdirectcare.com'' 
--DECLARE @ServerName VARCHAR(255)
--DECLARE @MailSubject VARCHAR(255)
--DECLARE @CombinedSubject VARCHAR(255)


--Set variables
--SET @ServerName1 = ''['' + @@SERVERNAME + '']''
SET @ServerName1 = ''[SERVER_NAME]'' --Need to hardcode server name for LSOs
SET @DatabaseName1 = ''.['' + DB_NAME() + '']''
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - Potential Missing Index Report ''
SET @CombinedSubject = @MailSubject + @ServerName1 + @DatabaseName1




 
--get core xml string
SET @xml = CAST(( SELECT 
[Server_Name] AS ''td''
,''''
,[DatabaseName] AS ''td''
,''''
,[Avg_Estimated_Impact] AS ''td''
,''''
,[Last_User_Seek] AS ''td''
,''''
,[Object_Name] AS ''td''
,''''
,[Index_Create_Statement] AS ''td''
,''''
,[QueryDate] AS ''td''
,''''
FROM  #TempMissingIndexes_DATABASE_NAME
ORDER BY [Avg_Estimated_Impact]
FOR XML PATH(''tr''), ELEMENTS ) AS NVARCHAR(MAX));


--EVALUATE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, ''<td>zg'', ''<td id="g">''); -- Green
SET @xml=REPLACE(@xml, ''<td>zr'', ''<td id="r">''); -- Red
SET @xml=REPLACE(@xml, ''<td>zorng'', ''<td id="orng">''); -- Orange

--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''''
, @pos = CHARINDEX(''<tr>'', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX(''<tr>'', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
SET @s += @ts;

--WRITE RESULT SET TO EMAIL BODY
SET @body +=
''<body>
<H3>Potential Missing Indexes</H3>
<BR>
This should be step TWO of the Index Tuning Lifecycle:


<BR><BR>
Indexes are <b>most</b> useful for the retrieval (reading) of data.  The output of this query is SQL Server essentially looking at the statistics of all the queries run against objects in the database since the last server reboot, and outlining 
where a performance benefit may be realized if the data is indexed.  

<BR><BR>

Utilize the results generated from this process as an indication of where to start dedicating research/development efforts, 
<b>NOT</b> as a hard and fast directive to create the indexes as suggested without further research
<BR><BR>

<BR>
<table border = 1> 
<tr>

<th> SERVER NAME </th> 
<th> DATABASE NAME </th> 
<th> POTENTIAL IMPROVEMENT MEASURE </th>
<th> LAST USER SEEK </th> 
<th> OBJECT NAME</th>
<th> INDEX CREATE STATEMENT </th>
<th> QUERY DATE </th>


</tr>'' 
+ @s+''</table> </body> </html>
<BR><BR>
Regards,
<BR>
CDCN Database Administration
<BR><BR><BR><BR>

'' ;
 

EXEC msdb.dbo.sp_send_dbmail
@profile_name = ''SQLServer''
--,@recipients = @recipients
,@recipients = ''stephenm@consumerdirectcare.com'' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format =''HTML''
END


DROP TABLE IF EXISTS #TempMissingIndexes_DATABASE_NAME







', 
		@database_name=N'master', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:
GO

