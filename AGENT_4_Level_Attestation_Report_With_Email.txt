USE [msdb]
GO

/****** Object:  Job [[DBA] - Quarterly Access Review [Cobra]]    Script Date: 11/1/2024 3:51:26 PM ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Uncategorized (Local)]]    Script Date: 11/1/2024 3:51:27 PM ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'[DBA] - Quarterly Access Review [Cobra]', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'This routine captures the access levels present within a scrutinized database.  ****Change the Database dropdown in the Capture reportable permissions step****  There should be one job per database being scrutinized.', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'sa', @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Capture reportable permissions]    Script Date: 11/1/2024 3:51:28 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Capture reportable permissions', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'DROP TABLE  spc_dba_utilities..permission_audit_temp
GO

SELECT DISTINCT @@SERVERNAME AS ServerName
	, UserName AS LoginName
	, UserType AS LoginType
	, DatabaseUserName
	, ROLE
	, PermissionType
	, PermissionState
	, DatabaseName = db_name()
	, DefaultSchema
	, SecurableName
	, SecurableType
	, ColumnName
--  , item -- used to check consistencies in each subquery
INTO spc_dba_utilities..permission_audit_temp
FROM (
	SELECT UserName = princ.name
		, UserType = CASE princ.type
			WHEN ''S''
				THEN ''SQL Authenticated USER''
			WHEN ''U''
				THEN ''Windows Authenticated USER''
			WHEN ''G''
				THEN ''Windows GROUP''
			WHEN ''A''
				THEN ''Application ROLE''
			WHEN ''R''
				THEN ''Database ROLE''
			WHEN ''K''
				THEN ''User mapped to ASYMMETRIC KEY''
			WHEN ''X''
				THEN ''External GROUP from Microsoft Entra ID''
			WHEN ''E''
				THEN ''External USER from Microsoft Entra ID''
			WHEN ''C''
				THEN ''User mapped to a CERTIFICATE''
			ELSE princ.type
			END
		, DatabaseUserName = princ.name
		, ROLE = princ.name
		, PermissionType = PERM.permission_name
		, PermissionState = PERM.state_desc
		, DefaultSchema = princ.default_schema_name
		, SecurableType = obj.type_desc
		, SecurableName = coalesce(OBJECT_NAME(PERM.major_id), db_name())
		, ColumnName = col.name
		, 1 AS item
	FROM sys.database_principals princ
	LEFT JOIN sys.login_token ulogin
		ON princ.sid = ulogin.sid
	LEFT JOIN sys.database_permissions PERM
		ON PERM.grantee_principal_id = princ.principal_id
	LEFT JOIN sys.columns col
		ON col.object_id = PERM.major_id
			AND col.column_id = PERM.minor_id
	LEFT JOIN sys.objects obj
		ON PERM.major_id = obj.object_id
	--WHERE PERM.permission_name <> ''CONNECT''
	
	UNION
	
	SELECT UserName = memberprinc.name
		, UserType = CASE memberprinc.type
			WHEN ''S''
				THEN ''SQL Authenticated USER''
			WHEN ''U''
				THEN ''Windows Authenticated USER''
			WHEN ''G''
				THEN ''Windows GROUP''
			WHEN ''A''
				THEN ''Application ROLE''
			WHEN ''R''
				THEN ''Database ROLE''
			WHEN ''K''
				THEN ''User mapped to ASYMMETRIC KEY''
			WHEN ''X''
				THEN ''External GROUP from Microsoft Entra ID''
			WHEN ''E''
				THEN ''External USER from Microsoft Entra ID''
			WHEN ''C''
				THEN ''User mapped to a CERTIFICATE''
			ELSE memberprinc.type
			END
		, DatabaseUserName = memberprinc.name
		, ROLE = roleprinc.name
		, PermissionType = PERM.permission_name
		, PermissionState = PERM.state_desc
		, DefaultSchema = roleprinc.default_schema_name
		, SecurableType = obj.type_desc
		, SecurableName = db_name()
		, ColumnName = col.name
		, 2 AS item
	FROM sys.database_role_members members
	INNER JOIN sys.database_principals roleprinc
		ON roleprinc.principal_id = members.role_principal_id
	INNER JOIN sys.database_principals memberprinc
		ON memberprinc.principal_id = members.member_principal_id
	LEFT JOIN sys.login_token ulogin
		ON memberprinc.sid = ulogin.sid
	LEFT JOIN sys.database_permissions PERM
		ON PERM.grantee_principal_id = roleprinc.principal_id
	LEFT JOIN sys.columns col
		ON col.object_id = PERM.major_id
			AND col.column_id = PERM.minor_id
	LEFT JOIN sys.objects obj
		ON PERM.major_id = obj.object_id
	
	UNION
	
	SELECT UserName = roleprinc.name
		, UserType = CASE roleprinc.type
			WHEN ''S''
				THEN ''SQL Authenticated USER''
			WHEN ''U''
				THEN ''Windows Authenticated USER''
			WHEN ''G''
				THEN ''Windows GROUP''
			WHEN ''A''
				THEN ''Application ROLE''
			WHEN ''R''
				THEN ''Database ROLE''
			WHEN ''K''
				THEN ''User mapped to ASYMMETRIC KEY''
			WHEN ''X''
				THEN ''External GROUP from Microsoft Entra ID''
			WHEN ''E''
				THEN ''External USER from Microsoft Entra ID''
			WHEN ''C''
				THEN ''User mapped to a CERTIFICATE''
			ELSE roleprinc.type
			END
		, DatabaseUserName = roleprinc.name
		, ROLE = roleprinc.name
		, PermissionType = PERM.permission_name
		, PermissionState = PERM.state_desc
		, DefaultSchema = roleprinc.default_schema_name
		, SecurableType = obj.type_desc
		, SecurableName = coalesce(OBJECT_NAME(PERM.major_id), db_name())
		, ColumnName = col.name
		, 3 AS item
	FROM sys.database_principals roleprinc
	LEFT JOIN sys.database_permissions PERM
		ON PERM.grantee_principal_id = roleprinc.principal_id
	LEFT JOIN sys.columns col
		ON col.object_id = PERM.major_id
			AND col.column_id = PERM.minor_id
	LEFT JOIN sys.objects obj
		ON obj.object_id = PERM.major_id
	
	UNION
	
	SELECT UserName = princ.name collate Latin1_General_CI_AS
		, UserType = CASE princ.type
			WHEN ''S''
				THEN ''SQL Authenticated USER''
			WHEN ''U''
				THEN ''Windows Authenticated USER''
			WHEN ''G''
				THEN ''Windows GROUP''
			WHEN ''A''
				THEN ''Application ROLE''
			WHEN ''R''
				THEN ''Database ROLE''
			WHEN ''K''
				THEN ''User mapped to ASYMMETRIC KEY''
			WHEN ''X''
				THEN ''External GROUP from Microsoft Entra ID''
			WHEN ''E''
				THEN ''External USER from Microsoft Entra ID''
			WHEN ''C''
				THEN ''User mapped to a CERTIFICATE''
			ELSE princ.type
			END
		, DatabaseUserName = princ.name collate Latin1_General_CI_AS
		, ROLE = CASE 
			WHEN logins.sysadmin = 1
				THEN ''sysadmin''
			WHEN logins.securityadmin = 1
				THEN ''securityadmin''
			WHEN logins.serveradmin = 1
				THEN ''serveradmin''
			WHEN logins.setupadmin = 1
				THEN ''setupadmin''
			WHEN logins.processadmin = 1
				THEN ''processadmin''
			WHEN logins.diskadmin = 1
				THEN ''diskadmin''
			WHEN logins.dbcreator = 1
				THEN ''dbcreator''
			WHEN logins.bulkadmin = 1
				THEN ''bulkadmin''
			ELSE ''Public''
			END
		, PermissionType = PERM.permission_name
		, PermissionState = ''GRANT''
		, DefaultSchema = NULL
		, SecurableType = NULL
		, SecurableName = princ.default_database_name
		, ColumnName = NULL
		, 4 AS item
	FROM sys.server_principals princ
	INNER JOIN sys.syslogins logins
		ON princ.sid = logins.sid
	LEFT JOIN sys.database_permissions PERM
		ON PERM.grantee_principal_id = princ.principal_id
	WHERE princ.type <> ''R''
		--AND princ.name NOT LIKE ''#%''
		--AND princ.NAME != ''117968-a1''
		--AND princ.NAME != ''117962-a1''
		--AND princ.NAME != ''sa''
		--AND princ.NAME != ''idera_dm_admin''
		--AND princ.NAME != ''cms_admin''
		--AND princ.NAME NOT LIKE ''NT%SERVICE%''
	) P
--WHERE (
--		ROLE <> ''Public''
--		OR SecurableName = db_name()
--		)
ORDER BY P.DatabaseUserName
	, P.SecurableName
	, P.ColumnName
	, P.PermissionType
	, P.PermissionState
	, P.DefaultSchema
	, P.SecurableType

', 
		@database_name=N'Cobra', 
		@flags=4
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Format results for subsequent reporting]    Script Date: 11/1/2024 3:51:29 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Format results for subsequent reporting', 
		@step_id=2, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'
UPDATE spc_dba_utilities..permission_audit_temp
SET PermissionType = ''EXPLICIT SERVER INSTANCE LEVEL''
WHERE ROLE IN (''sysadmin'',''superuser'',''securityadmin'',''setupadmin'',''serveradmin'',''processadmin'',''diskadmin'',''dbcreator'',''bulkadmin'')
AND PermissionType IS NULL
GO
UPDATE spc_dba_utilities..permission_audit_temp
SET PermissionType = ''EXPLICIT DATABASE LEVEL''
WHERE ROLE IN (''db_owner'',''db_datareader'',''db_datawriter'',''db_sp_executor'',''db_ddladmin'',''db_backupoperator'',''db_accessadmin'',''db_denydatawriter'',''db_denydatareader'',''db_superuser'',''db_github_promotion'')
AND PermissionType IS NULL
GO
UPDATE spc_dba_utilities..permission_audit_temp 
SET PermissionType = ''EXPLICIT DATABASE SCHEMA LEVEL: '' + PermissionType
WHERE DefaultSchema IS NOT NULL
AND DefaultSchema NOT IN (''dbo'',''guest'')
GO
UPDATE spc_dba_utilities..permission_audit_temp 
SET PermissionType = ''EXPLICIT DATABASE SCHEMA LEVEL: '' + Role
WHERE PermissionType IS NULL
AND LoginName in (select LoginName from spc_dba_utilities..permission_audit_temp where PermissionType LIKE ''EXPLICIT DATABASE SCHEMA%'')
GO
UPDATE spc_dba_utilities..permission_audit_temp 
SET PermissionType = ''DEFAULT SERVER INSTANCE LEVEL.  NO USER MAPPING TO '' + DatabaseName
WHERE PermissionType IS NULL
GO
', 
		@database_name=N'master', 
		@flags=4
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [DEFAULT SQL SERVER INSTANCE REPORT]    Script Date: 11/1/2024 3:51:29 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'DEFAULT SQL SERVER INSTANCE REPORT', 
		@step_id=3, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'CREATE TABLE #AuditTemp
( [ServerName] [varchar](max),
  [LoginType]  [varchar](max),
  [LoginName] [varchar](max),
  [DatabaseUserName]  [varchar](max),
  [PermissionType] [varchar](max),
  [ReportDate] [varchar](max),
)



INSERT INTO #AuditTemp
SELECT
   [ServerName]
  ,[LoginType]
  ,[LoginName]
  ,[DatabaseUserName]
  ,[PermissionType]
  ,getdate() 
--  ,CONVERT(DATE, CONVERT(VARCHAR(20), DATEADD(DAY, -DATEDIFF(DAY, 0, [LastBatch]) % 7, [LastBatch]), 120)) 
FROM [spc_dba_utilities].[dbo].[permission_audit_temp]
WHERE PermissionType LIKE ''DEFAULT SERVER INSTANCE LEVEL%''
AND LoginType != ''Database ROLE'' --Exclude database roles
AND LoginType != ''User mapped to a CERTIFICATE'' --Exclude certificates
AND LoginName != ''INFORMATION_SCHEMA'' --Exclude default system schema
AND LoginName not in (''dbo'',''sa'',''guest'',''sys'',''117968-a1'',''117962-a1'',''idera_dm_admin'',''SIERRASPACE\SVC_SQL_IDERA_DM'',''cms_admin'') --Exclude default dbo user, default sa account, default guest account, default sys account, DBA administrative accounts, IDERA DM service account, Central Management Server service account
AND LoginName not like ''##%'' -- Exclude system accounts
AND LoginName not like ''NT%\%''-- Exclude system accounts


ORDER BY LoginName, PermissionType



-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= ''
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #odd {background-color: lightgrey}
</style> </head>'';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);

DECLARE @recipients VARCHAR(MAX) = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com'' 
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - Quarterly User Access Review DEFAULT SQL SERVER INSTANCE '' + @@SERVERNAME
SET @CombinedSubject = @ServerName + @MailSubject


 
--get core xml string
SET @xml = CAST((SELECT
 [ServerName] AS ''td''
, ''''
,CASE WHEN [LoginType] LIKE ''%GROUP%''
		THEN ''zr''+CAST([LoginType] AS VARCHAR(255))
	 ELSE CAST([LoginType] AS VARCHAR(255))
 END AS ''td''
,''''
,[LoginName] AS ''td''
,''''
,[DatabaseUserName] AS ''td''
,''''
,[PermissionType] AS ''td''
,''''
,[ReportDate] AS ''td''
,''''
FROM  #AuditTemp
ORDER BY [LoginName], [PermissionType]
FOR XML PATH(''tr''), ELEMENTS ) AS NVARCHAR(MAX));


--EVALUATE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, ''<td>zg'', ''<td id="g">''); -- Green
SET @xml=REPLACE(@xml, ''<td>zr'', ''<td id="r">''); -- Red


--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''''
, @pos = CHARINDEX(''<tr>'', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX(''<tr>'', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
SET @s += @ts;

--WRITE RESULT SET TO EMAIL BODY
SET @body +=''<body><H3><U>DEFAULT ACCESS LEVEL LOGINS</U></H3>

<H3>IMPORTANT NOTE:</H3>  Security group membership is managed via platform(s) external to SQL Server <i>(e.g., Windows Active Directory, Microsoft Entra ID)</i>, and insight into those groups from within SQL Server is limited.  To help ease the burden of review within this report, the Login Type field has been colored red for accounts that are managed outside of SQL Server.  

<BR><BR>
<H3>For definitive group membership lists, please consult the platform administrator to suit your needs.</H3>

<BR><BR>
<U>REPORT DESCRIPTION:</U> 
<BR>


This report displays logins that are present at the instance level of '' + @@SERVERNAME + 

''
<BR><BR>
As stated in the Permission Type field, these logins are not mapped to the database being scrutinized, and have NO implied access to the database or its objects


<BR><BR>
<table border = 1> 
<tr>
<th> Server Name </th> 
<th> Login Type </th> 
<th> Login Name </th>
<th> Database User Name </th> 
<th> Permission Type</th>
<th> Capture Date</th> 

</tr>'' 
+ @s+''</table> </body> </html>

<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions Team'';
 


EXEC msdb.dbo.sp_send_dbmail
@profile_name = ''SQLServer''
--,@recipients = @recipients
,@recipients = ''stephen.mccord@sierraspace.com'' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format =''HTML'';

DROP TABLE #AuditTemp;
', 
		@database_name=N'master', 
		@flags=4
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [EXPLICIT SQL SERVER INSTANCE REPORT]    Script Date: 11/1/2024 3:51:29 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'EXPLICIT SQL SERVER INSTANCE REPORT', 
		@step_id=4, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'

CREATE TABLE #AuditTemp2
( [ServerName] [varchar](max),
  [LoginType]  [varchar](max),
  [LoginName] [varchar](max),
  [DatabaseUserName]  [varchar](max),
  [PermissionType] [varchar](max),
  [Role] [varchar](max),
  [DatabaseName] [varchar](max),
  [ReportDate] [varchar](max),
)



INSERT INTO #AuditTemp2
SELECT
   [ServerName]
  ,[LoginType]
  ,[LoginName]
  ,[DatabaseUserName]
  ,[PermissionType]
  ,[Role]
  ,[DatabaseName]
  ,getdate() 
--  ,CONVERT(DATE, CONVERT(VARCHAR(20), DATEADD(DAY, -DATEDIFF(DAY, 0, [LastBatch]) % 7, [LastBatch]), 120)) 
FROM [spc_dba_utilities].[dbo].[permission_audit_temp]
WHERE PermissionType LIKE (''EXPLICIT SERVER INSTANCE LEVEL%'')
AND LoginType != ''Database ROLE'' --Exclude database roles
AND LoginType != ''User mapped to a CERTIFICATE'' --Exclude certificates
AND LoginName != ''INFORMATION_SCHEMA'' --Exclude default system schema
AND LoginName not in (''dbo'',''sa'',''guest'',''sys'',''117968-a1'',''117962-a1'',''idera_dm_admin'',''SIERRASPACE\SVC_SQL_IDERA_DM'',''cms_admin'') --Exclude default dbo user, default sa account, default guest account, default sys account, DBA administrative accounts, IDERA DM service account, Central Management Server service account
AND LoginName not like ''##%'' -- Exclude system accounts
AND LoginName not like ''NT%\%''-- Exclude system accounts
ORDER BY LoginName, PermissionType



-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= ''
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #odd {background-color: lightgrey}
</style> </head>'';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);

DECLARE @recipients VARCHAR(MAX) = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com'' 
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - Quarterly User Access Review EXPLICIT SQL SERVER INSTANCE '' + @@SERVERNAME
SET @CombinedSubject = @ServerName + @MailSubject



--SET @xml = CAST(( SELECT 
--CASE WHEN [SessionCount] <=50 
--		THEN''zr''+CAST([SessionCount] AS VARCHAR(30))
--     WHEN [SessionCount] >=51 
--		THEN''zg''+CAST([SessionCount] AS VARCHAR(30))
--     ELSE CAST([SessionCount] AS VARCHAR(30))
--END AS ''td''
--, ''''

 
--get core xml string
SET @xml = CAST((SELECT
 [ServerName] AS ''td''
, ''''
,CASE WHEN [LoginType] LIKE ''%GROUP%''
		THEN ''zr''+CAST([LoginType] AS VARCHAR(255))
	 ELSE CAST([LoginType] AS VARCHAR(255))
 END AS ''td''
,''''
,[LoginName] AS ''td''
,''''
,[DatabaseUserName] AS ''td''
,''''
,[PermissionType] AS ''td''
,''''
,[Role] AS ''td''
,''''
,[DatabaseName] AS ''td''
,''''
,[ReportDate] AS ''td''
,''''
FROM  #AuditTemp2
ORDER BY [LoginName], [PermissionType]
FOR XML PATH(''tr''), ELEMENTS ) AS NVARCHAR(MAX));


--EVALUATE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, ''<td>zg'', ''<td id="g">''); -- Green
SET @xml=REPLACE(@xml, ''<td>zr'', ''<td id="r">''); -- Red


--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''''
, @pos = CHARINDEX(''<tr>'', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX(''<tr>'', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
SET @s += @ts;

--WRITE RESULT SET TO EMAIL BODY
SET @body +=''<body><H3><U>EXPLICIT INSTANCE LEVEL LOGINS</U></H3>

<H3>IMPORTANT NOTE:</H3>  Security group membership is managed via platform(s) external to SQL Server <i>(e.g., Windows Active Directory, Microsoft Entra ID)</i>, and insight into those groups from within SQL Server is limited.  To help ease the burden of review within this report, the Login Type field has been colored red for accounts that are managed outside of SQL Server.  

<BR><BR>
<H3>For definitive group membership lists, please consult the platform administrator to suit your needs.</H3>

<BR><BR>
<U>REPORT DESCRIPTION:</U> 
<BR>
This report displays logins that are present at the instance level of '' + @@SERVERNAME + ''

<BR><BR>
Although these logins are not mapped to the database being scrutinized, they <b><U>*DO*</U></b> have implied access to the database layer due to the role membership granted at the instance level.


<BR><BR>
<table border = 1> 
<tr>
<th> Server Name </th> 
<th> Login Type </th> 
<th> Login Name </th>
<th> Database User Name </th> 
<th> Permission Type</th>
<th> Role </th>
<th> Database Name </th>
<th> Capture Date</th> 

</tr>'' 
+ @s+''</table> </body> </html>


<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions Team'';
 


EXEC msdb.dbo.sp_send_dbmail
@profile_name = ''SQLServer''
--,@recipients = @recipients
,@recipients = ''stephen.mccord@sierraspace.com'' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format =''HTML'';

DROP TABLE #AuditTemp2;


', 
		@database_name=N'master', 
		@flags=4
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [EXPLICIT DATABASE LEVEL REPORT]    Script Date: 11/1/2024 3:51:29 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'EXPLICIT DATABASE LEVEL REPORT', 
		@step_id=5, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'
CREATE TABLE #AuditTemp3
( [ServerName] [varchar](max),
  [LoginType]  [varchar](max),
  [LoginName] [varchar](max),
  [DatabaseUserName]  [varchar](max),
  [PermissionType] [varchar](max),
  [DatabaseName] [varchar](max),
  [Role] [varchar](max),
  [ReportDate] [varchar](max),
)



INSERT INTO #AuditTemp3
SELECT
   [ServerName]
  ,[LoginType]
  ,[LoginName]
  ,[DatabaseUserName]
  ,[PermissionType]
  ,[DatabaseName]
  ,[Role]
  ,getdate() 
--  ,CONVERT(DATE, CONVERT(VARCHAR(20), DATEADD(DAY, -DATEDIFF(DAY, 0, [LastBatch]) % 7, [LastBatch]), 120)) 
FROM [spc_dba_utilities].[dbo].[permission_audit_temp]
WHERE PermissionType LIKE (''EXPLICIT DATABASE LEVEL%'')
AND LoginType != ''Database ROLE'' --Exclude database roles
AND LoginType != ''User mapped to a CERTIFICATE'' --Exclude certificates
AND LoginName != ''INFORMATION_SCHEMA'' --Exclude default system schema
AND LoginName not in (''dbo'',''sa'',''guest'',''sys'',''117968-a1'',''117962-a1'',''idera_dm_admin'',''SIERRASPACE\SVC_SQL_IDERA_DM'',''cms_admin'') --Exclude default dbo user, default sa account, default guest account, default sys account, DBA administrative accounts, IDERA DM service account, Central Management Server service account
AND LoginName not like ''##%'' -- Exclude system accounts
AND LoginName not like ''NT%\%''-- Exclude system accounts
ORDER BY LoginName, PermissionType


-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= ''
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #odd {background-color: lightgrey}
</style> </head>'';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);

DECLARE @recipients VARCHAR(MAX) = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com'' 
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - Quarterly User Access Review EXPLICIT DATABASE LEVEL '' + @@SERVERNAME
SET @CombinedSubject = @ServerName + @MailSubject


 
--get core xml string
SET @xml = CAST((SELECT
 [ServerName] AS ''td''
, ''''
,CASE WHEN [LoginType] LIKE ''%GROUP%''
		THEN ''zr''+CAST([LoginType] AS VARCHAR(255))
	 ELSE CAST([LoginType] AS VARCHAR(255))
 END AS ''td''
,''''
,[LoginName] AS ''td''
,''''
,[DatabaseUserName] AS ''td''
,''''
,[PermissionType] AS ''td''
,''''
,[DatabaseName] AS ''td''
,''''
,[Role] AS ''td''
,''''
,[ReportDate] AS ''td''
,''''
FROM  #AuditTemp3
ORDER BY [LoginName], [PermissionType]
FOR XML PATH(''tr''), ELEMENTS ) AS NVARCHAR(MAX));


--EVALUATE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, ''<td>zg'', ''<td id="g">''); -- Green
SET @xml=REPLACE(@xml, ''<td>zr'', ''<td id="r">''); -- Red


--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''''
, @pos = CHARINDEX(''<tr>'', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX(''<tr>'', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
SET @s += @ts;


--WRITE RESULT SET TO EMAIL BODY
SET @body +=''<body><H3><U>EXPLICIT DATABASE LEVEL USERS</U></H3>

<H3>IMPORTANT NOTE:</H3>  Security group membership is managed via platform(s) external to SQL Server <i>(e.g., Windows Active Directory, Microsoft Entra ID)</i>, and insight into those groups from within SQL Server is limited.  To help ease the burden of review within this report, the Login Type field has been colored red for accounts that are managed outside of SQL Server.  

<BR><BR>
<H3>For definitive group membership lists, please consult the respective platform administrator that best suits your needs.</H3>

<BR><BR>
<U>REPORT DESCRIPTION:</U> 
<BR>

This report displays database users that are mapped to logins present at the instance level of '' + @@SERVERNAME + 

''
<BR><BR>
As stated in the Permission Type field, these users have been granted the level of access that corresponds with the role described.

<BR><BR>
<table border = 1> 
<tr>
<th> Server Name </th> 
<th> Login Type </th> 
<th> Login Name </th>
<th> Database User Name </th> 
<th> Permission Type</th>
<th> Database Name </th>
<th> Role </th>
<th> Capture Date</th> 

</tr>'' 
+ @s+''</table> </body> </html>

<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions Team'';
 


EXEC msdb.dbo.sp_send_dbmail
@profile_name = ''SQLServer''
--,@recipients = @recipients
,@recipients = ''stephen.mccord@sierraspace.com'' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format =''HTML'';

DROP TABLE #AuditTemp3;
', 
		@database_name=N'master', 
		@flags=4
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [EXPLICIT DATABASE SCHEMA LEVEL]    Script Date: 11/1/2024 3:51:29 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'EXPLICIT DATABASE SCHEMA LEVEL', 
		@step_id=6, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'CREATE TABLE #AuditTemp4
( [ServerName] [varchar](max),
  [LoginType]  [varchar](max),
  [LoginName] [varchar](max),
  [DatabaseUserName]  [varchar](max),
  [PermissionType] [varchar](max),
  [DatabaseName] [varchar](max),
  [ReportDate] [varchar](max),
)



INSERT INTO #AuditTemp4
SELECT
   [ServerName]
  ,[LoginType]
  ,[LoginName]
  ,[DatabaseUserName]
  ,[PermissionType]
  ,[DatabaseName]
  ,getdate() 
--  ,CONVERT(DATE, CONVERT(VARCHAR(20), DATEADD(DAY, -DATEDIFF(DAY, 0, [LastBatch]) % 7, [LastBatch]), 120)) 
FROM [spc_dba_utilities].[dbo].[permission_audit_temp]
WHERE PermissionType LIKE (''EXPLICIT DATABASE SCHEMA LEVEL:%'')
AND LoginType != ''Database ROLE'' --Exclude database roles
AND LoginType != ''User mapped to a CERTIFICATE'' --Exclude certificates
AND LoginName != ''INFORMATION_SCHEMA'' --Exclude default system schema
AND LoginName not in (''dbo'',''sa'',''guest'',''sys'',''117968-a1'',''117962-a1'',''idera_dm_admin'',''SIERRASPACE\SVC_SQL_IDERA_DM'',''cms_admin'') --Exclude default dbo user, default sa account, default guest account, default sys account, DBA administrative accounts, IDERA DM service account, Central Management Server service account
AND LoginName not like ''##%'' -- Exclude system accounts
AND LoginName not like ''NT%\%''-- Exclude system accounts
AND DefaultSchema NOT IN (''dbo'',''guest'') --Exclude default schemas
ORDER BY LoginName, PermissionType



-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= ''
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #odd {background-color: lightgrey}
</style> </head>'';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);

DECLARE @recipients VARCHAR(MAX) = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com'' 
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - Quarterly User Access Review EXPLICIT DATABASE SCHEMA LEVEL '' + @@SERVERNAME
SET @CombinedSubject = @ServerName + @MailSubject


 
--get core xml string
SET @xml = CAST((SELECT
 [ServerName] AS ''td''
, ''''
,CASE WHEN [LoginType] LIKE ''%GROUP%''
		THEN ''zr''+CAST([LoginType] AS VARCHAR(255))
	 ELSE CAST([LoginType] AS VARCHAR(255))
 END AS ''td''
,''''
,[LoginName] AS ''td''
,''''
,[DatabaseUserName] AS ''td''
,''''
,[PermissionType] AS ''td''
,''''
,[DatabaseName] AS ''td''
,''''
,[ReportDate] AS ''td''
,''''
FROM  #AuditTemp4
ORDER BY [LoginName], [PermissionType]
FOR XML PATH(''tr''), ELEMENTS ) AS NVARCHAR(MAX));


--EVALUATE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, ''<td>zg'', ''<td id="g">''); -- Green
SET @xml=REPLACE(@xml, ''<td>zr'', ''<td id="r">''); -- Red


--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''''
, @pos = CHARINDEX(''<tr>'', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX(''<tr>'', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
SET @s += @ts;


--WRITE RESULT SET TO EMAIL BODY
SET @body +=''<body><H3><U>EXPLICIT DATABASE SCHEMA LEVEL USERS</U></H3>

<H3>IMPORTANT NOTE:</H3>  Security group membership is managed via platform(s) external to SQL Server <i>(e.g., Windows Active Directory, Microsoft Entra ID)</i>, and insight into those groups from within SQL Server is limited.  To help ease the burden of review within this report, the Login Type field has been colored red for accounts that are managed outside of SQL Server.  

<BR><BR>
<H3>For definitive group membership lists, please consult the respective platform administrator that best suits your needs.</H3>

<BR><BR>
<U>REPORT DESCRIPTION:</U> 
<BR>

This report displays database users that are mapped to logins present at the instance level of '' + @@SERVERNAME + 

''
<BR><BR>
These users do <b>NOT</b> belong to a database role.

<BR><BR>
Rather, they have been granted the explicit permission illustrated in the Permission Type field, to the Databae Schema noted.


<BR><BR>
<table border = 1> 
<tr>
<th> Server Name </th> 
<th> Login Type </th> 
<th> Login Name </th>
<th> Database User Name </th> 
<th> Permission Type</th>
<th> Database Name </th>
<th> Capture Date</th> 

</tr>'' 
+ @s+''</table> </body> </html>

<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions Team'';
 


EXEC msdb.dbo.sp_send_dbmail
@profile_name = ''SQLServer''
--,@recipients = @recipients
,@recipients = ''stephen.mccord@sierraspace.com'' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format =''HTML'';

DROP TABLE #AuditTemp4;
', 
		@database_name=N'master', 
		@flags=4
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:
GO


