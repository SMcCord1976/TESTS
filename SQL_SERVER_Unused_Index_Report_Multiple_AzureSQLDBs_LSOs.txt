/**************************************************/
/* VARIABLES PER SERVER:
    Centralized Server: CMS_TEST
    LSOs: CMS_u2_PROD_db1, CMS_u2_PROD_db2, etc.
    Azure DBs: U2Billing_cdak, etc.
*/
/**************************************************/
-- Create permanent table to store DROP INDEX statements
IF NOT EXISTS (
		SELECT *
		FROM sys.tables
		WHERE name = 'UnusedIndexDropStatements'
		)
BEGIN
	CREATE TABLE UnusedIndexDropStatements (
		Id INT IDENTITY(1, 1) PRIMARY KEY
		,Server_Name NVARCHAR(128)
		,DatabaseName NVARCHAR(128)
		,Object_Name NVARCHAR(128)
		,Index_Name NVARCHAR(128)
		,Drop_Index_Statement NVARCHAR(MAX)
		,GeneratedDate DATETIME DEFAULT GETDATE()
		,Executed BIT DEFAULT 0
		,ExecutedDate DATETIME NULL
		);
END;

-- Initialize Run
DROP TABLE

IF EXISTS #TempUnusedIndexes_All;
	CREATE TABLE #TempUnusedIndexes_All (
		[Server_Name] [nvarchar](max)
		,[DatabaseName] [nvarchar](max)
		,[Object_Name] [nvarchar](max)
		,[Index_Name] [nvarchar](max)
		,[Reads] [nvarchar](max)
		,[Writes] [nvarchar](max)
		,[Table_Rows] [nvarchar](max)
		,[Reads_Per_Writes] [nvarchar](max)
		,[Drop_Index_Statement] [nvarchar](max)
		,[QueryDate] [nvarchar](max)
		);

-- Table to store LSOs
DROP TABLE

IF EXISTS #LSOs;
	CREATE TABLE #LSOs (
		LSO_Name NVARCHAR(128)
		,DB_Name NVARCHAR(128)
		);

-- Populate with LSOs from sys.servers
INSERT INTO #LSOs (
	LSO_Name
	,DB_Name
	)
SELECT name
	,CATALOG
FROM sys.servers
WHERE name LIKE 'CMS_u2_PROD%'
	AND name NOT LIKE '%_master'
	AND is_linked = 1;

-- Cursor to loop through LSOs
DECLARE @LSO_Name NVARCHAR(128)
	,@DB_Name NVARCHAR(128)
	,@InnerScript NVARCHAR(max)
	,@QueryStmt NVARCHAR(max);

DECLARE lso_cursor CURSOR
FOR
SELECT LSO_Name
	,DB_Name
FROM #LSOs;

OPEN lso_cursor;

FETCH NEXT
FROM lso_cursor
INTO @LSO_Name
	,@DB_Name;

WHILE @@FETCH_STATUS = 0
BEGIN
	SET @InnerScript = N'SELECT TOP 3
        @@SERVERNAME as ''Server_Name'',
        ''' + @DB_Name + ''' as ''DatabaseName'',
        o.NAME AS ''Object_Name'',
        i.NAME AS ''Index_Name'',
        CAST(dm_ius.user_seeks + dm_ius.user_scans + dm_ius.user_lookups AS nvarchar(max)) AS ''Reads'',
        CAST(dm_ius.user_updates AS nvarchar(max)) AS ''Writes'',
        CAST(p.TableRows AS nvarchar(max)) AS ''Table_Rows'',
        CAST(CASE 
            WHEN dm_ius.user_updates < 1 THEN 100
            ELSE 1.00 * (dm_ius.user_seeks + dm_ius.user_scans + dm_ius.user_lookups) / dm_ius.user_updates
        END AS nvarchar(max)) AS ''Reads_Per_Writes'',
        ''DROP INDEX '' + QUOTENAME(i.name) + '' ON '' + QUOTENAME(s.name) + ''.'' + QUOTENAME(OBJECT_NAME(dm_ius.OBJECT_ID)) AS ''Drop_Index_Statement'',
        CAST(GETDATE() AS nvarchar(max)) AS ''QueryDate''
    FROM [' + @DB_Name + '].sys.dm_db_index_usage_stats dm_ius
    INNER JOIN [' + @DB_Name + 
		'].sys.indexes i 
        ON i.index_id = dm_ius.index_id 
        AND dm_ius.OBJECT_ID = i.OBJECT_ID
    INNER JOIN [' + @DB_Name + '].sys.objects o 
        ON dm_ius.OBJECT_ID = o.OBJECT_ID
    INNER JOIN [' + @DB_Name + '].sys.schemas s 
        ON o.schema_id = s.schema_id
    INNER JOIN (SELECT SUM(p.rows) TableRows, p.index_id, p.OBJECT_ID
        FROM [' + @DB_Name + '].sys.partitions p GROUP BY p.index_id, p.OBJECT_ID) p
        ON p.index_id = dm_ius.index_id AND dm_ius.OBJECT_ID = p.OBJECT_ID
    WHERE OBJECTPROPERTY(dm_ius.OBJECT_ID, ''IsUserTable'') = 1
        AND dm_ius.database_id = DB_ID(''' + @DB_Name + ''')
        AND i.type_desc = ''nonclustered''
        AND i.is_primary_key = 0
        AND i.is_unique_constraint = 0
    ORDER BY (dm_ius.user_seeks + dm_ius.user_scans + dm_ius.user_lookups) ASC';

	BEGIN TRY
		-- Use OPENQUERY to execute the query on the linked server
		SET @QueryStmt = N'INSERT INTO #TempUnusedIndexes_All 
                          SELECT * FROM OPENQUERY(' + QUOTENAME(@LSO_Name) + N', ''' + REPLACE(@InnerScript, '''', '''''') + N''');';

		PRINT 'Executing for ' + @LSO_Name + ': ' + LEFT(@QueryStmt, 100) + '...';

		EXEC sp_executesql @QueryStmt;

		-- Same for the permanent table
		SET @QueryStmt = N'INSERT INTO UnusedIndexDropStatements (Server_Name, DatabaseName, Object_Name, Index_Name, Drop_Index_Statement) 
                          SELECT Server_Name, DatabaseName, Object_Name, Index_Name, Drop_Index_Statement 
                          FROM OPENQUERY(' + QUOTENAME(@LSO_Name) + N', ''' + REPLACE(@InnerScript, '''', '''''') + N''');';

		EXEC sp_executesql @QueryStmt;
	END TRY

	BEGIN CATCH
		PRINT 'Error querying ' + @LSO_Name + ': ' + ERROR_MESSAGE();
	END CATCH;

	FETCH NEXT
	FROM lso_cursor
	INTO @LSO_Name
		,@DB_Name;
END;

CLOSE lso_cursor;

DEALLOCATE lso_cursor;

-- Diagnostic: Check collected data
SELECT *
FROM #TempUnusedIndexes_All;

PRINT 'Rows collected: ' + CAST(@@ROWCOUNT AS NVARCHAR(10));

-- Count the total number of unused indexes
DECLARE @CountValue INT;

SELECT @CountValue = COUNT(*)
FROM #TempUnusedIndexes_All;

IF (@CountValue = 0)
BEGIN
	DECLARE @ServerName1 VARCHAR(255) = '[U2_PROD]'
		,@MailSubject VARCHAR(255) = '[FOR INFORMATION / REVIEW] - Potential Unused Index Report (All DBs)'
		,@CombinedSubject VARCHAR(255)
		,@blankbody NVARCHAR(MAX);

	SET @CombinedSubject = @MailSubject + @ServerName1;
	SET @blankbody = 'NO UNUSED INDEXES DETECTED ACROSS ALL DATABASES<br><br>~*~NFAR~*~';

	EXEC msdb.dbo.sp_send_dbmail @profile_name = 'SQLServer'
		,@recipients = 'stephenm@consumerdirectcare.com'
		,@subject = @CombinedSubject
		,@body = @blankbody
		,@body_format = 'HTML';
END
ELSE
BEGIN
	-- Define CSS inside the HTML head section
	DECLARE @body VARCHAR(MAX) = '
    <html>
    <head> 
    <style>
        table { border-collapse: collapse; }
        th, td { padding: 8px; text-align: left; overflow: hidden; white-space: nowrap; }
        th { background-color: #f2f2f2; }
        #g { color: green; }
        #r { color: red; }
        #orng { color: orange; }
        #odd { background-color: lightsteelblue; }
    </style> 
    </head>';
	DECLARE @i INT = 0
		,@pos INT
		,@s VARCHAR(MAX)
		,@ts VARCHAR(MAX)
		,@xml VARCHAR(MAX);

	-- Set variables
	--DECLARE @MailSubject VARCHAR(255),
	--        @CombinedSubject VARCHAR(255);
	SET @ServerName1 = '[U2_PROD]';
	SET @MailSubject = '[FOR INFORMATION / REVIEW] - Potential Unused Index Report ';
	SET @CombinedSubject = @MailSubject + @ServerName1;
	-- Generate XML string
	SET @xml = CAST((
				SELECT [Server_Name] AS 'td'
					,''
					,[DatabaseName] AS 'td'
					,''
					,[Object_Name] AS 'td'
					,''
					,[Index_Name] AS 'td'
					,''
					,[Reads] AS 'td'
					,''
					,[Writes] AS 'td'
					,''
					,[Table_Rows] AS 'td'
					,''
					,[Reads_Per_Writes] AS 'td'
					,''
					,[QueryDate] AS 'td'
					,''
				FROM #TempUnusedIndexes_All
				ORDER BY [Reads_Per_Writes]
				FOR XML PATH('tr')
					,ELEMENTS
				) AS NVARCHAR(MAX));
	-- Apply color coding
	SET @xml = REPLACE(@xml, '<td>zg', '<td id="g">');
	SET @xml = REPLACE(@xml, '<td>zr', '<td id="r">');
	SET @xml = REPLACE(@xml, '<td>zorng', '<td id="orng">');

	-- Zebra striping
	SELECT @s = ''
		,@pos = CHARINDEX('<tr>', @xml, 4);

	WHILE (@pos > 0)
	BEGIN
		SET @i += 1;
		SET @ts = SUBSTRING(@xml, 1, @pos - 1);

		IF (@i % 2 = 1)
			SET @ts = REPLACE(@ts, '<tr>', '<tr id="odd">');
		SET @s += @ts;
		SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
		SET @pos = CHARINDEX('<tr>', @xml, 4);
	END;

	SET @i += 1;
	SET @ts = @xml;

	IF (@i % 2 = 1)
		SET @ts = REPLACE(@ts, '<tr>', '<tr id="odd">');
	SET @s += @ts;
	-- Build email body
	SET @body += 
		'
    <body>
    <h3>Potential Unused Indexes (All Databases)</h3>
    <br>
	Below is a table outlining the top 3 most inefficient indexes that could be removed in order to gain a performance benefit, for each database within the U2 (PROD) solution.
	<br><br>
    If review indicates that an index should be removed, please submit a request to the DBA Team containing the following information:
	<br><br>
    <b>DATABASE NAME</b> - <i>(e.g., U2Billing_cdak)</i>
    <br>
    <b>OBJECT NAME</b> - <i>(e.g., BillingRecords)</i>
    <br>
    <b>INDEX NAME</b> - <i>(e.g., IX_BillingRecords_All_Columns)</i>
    <br><br>
    <table border="1"> 
    <tr>
        <th style="width: 250px;">SERVER NAME</th>
        <th style="width: 350px;">DATABASE NAME</th>
        <th style="width: 110px;">OBJECT NAME</th>
        <th style="width: 100px;">INDEX NAME</th>
        <th style="width: 150px;">READS</th>
        <th style="width: 250px;">WRITES</th>
        <th style="width: 150px;">ROWS</th>
        <th style="width: 200px;">READS_PER_WRITES</th>
        <th style="width: 250px;">QUERY DATE</th>
    </tr>' 
		+ @s + '</table>
    <br><br><br>
	This should be step ONE of the Index Tuning Lifecycle:
    <br><br>
    Indexes are <b>most</b> useful for the retrieval <i>(reading)</i> of data. The output of this query is SQL Server essentially looking at the statistics of all the queries run since the last server reboot, and outlining 
    which indexes have a low read vs. write ratio.  
    <br><br>
    Utilize the results generated from this process as an indication of where to start dedicating research/development efforts, 
    <u>NOT</u> as a hard and fast directive to remove the indexes as suggested without comprehensive review.
    <br><br>
    Regards,
    <br>
    CDCN Database Administration
    <br><br><br><br>
    </body></html>';

	-- Send email
	EXEC msdb.dbo.sp_send_dbmail @profile_name = 'SQLServer'
		,@recipients = 'stephenm@consumerdirectcare.com'
		,@subject = @CombinedSubject
		,@body = @body
		,@body_format = 'HTML';
END;





