----Initialize for fresh run

--DROP TABLE ResourceHogLog;
--DROP TABLE NotificationLog;
--DROP TABLE DBATeam;
--DROP TABLE ErrorLog;
--DROP TABLE #CurrentUsage
--DROP TABLE #DebugLongRunning
--DROP TABLE #PreMergeDebug
--DROP TABLE #CursorDebug


---- Step 1: Ensure supporting tables exist
--CREATE TABLE dbo.ResourceHogLog (
--    LogID INT IDENTITY(1,1) PRIMARY KEY,
--    SPID INT,
--    LoginName NVARCHAR(128),
--    HostName NVARCHAR(128),
--    ProgramName NVARCHAR(128),
--    CPUTime BIGINT,
--    DiskIO BIGINT,
--    StartTime DATETIME,
--    LastCheckTime DATETIME,
--    Status NVARCHAR(50),
--    QueryText NVARCHAR(MAX),
--    Reason NVARCHAR(50)
--);

--CREATE TABLE dbo.NotificationLog (
--    NotificationID INT IDENTITY(1,1) PRIMARY KEY,
--    SPID INT,
--    LoginName NVARCHAR(128),
--    EmailSentTo NVARCHAR(255),
--    SentTime DATETIME,
--    Message NVARCHAR(MAX)
--);

--CREATE TABLE dbo.DBATeam (
--    TeamMemberID INT IDENTITY(1,1) PRIMARY KEY,
--    EmailAddress NVARCHAR(255)
--);

--IF NOT EXISTS (SELECT 1 FROM dbo.DBATeam)
--    INSERT INTO dbo.DBATeam (EmailAddress)
--    VALUES 
--        ('stephenm@consumerdirectcare.com');
--		--,
--  --      ('dba1@yourdomain.com'),
--  --      ('dba2@yourdomain.com');

--CREATE TABLE dbo.ErrorLog (
--    ErrorID INT IDENTITY(1,1) PRIMARY KEY,
--    ErrorMessage NVARCHAR(MAX),
--    ErrorDate DATETIME DEFAULT GETDATE()
--);



-- Step 2: Detect Resource Hogs and Long-Running Queries
DECLARE @TotalCPUTime BIGINT, @TotalDiskIO BIGINT;
DECLARE @ThresholdPercent FLOAT = 95.0;
DECLARE @MinDurationMinutes INT = 5;
DECLARE @LongRunningThresholdMinutes INT = 1;
DECLARE @KillWarningMinutes INT = 15;

CREATE TABLE #CurrentUsage (
    SPID INT,
    LoginName NVARCHAR(128),
    HostName NVARCHAR(128),
    ProgramName NVARCHAR(128),
    CPUTime BIGINT,
    DiskIO BIGINT,
    StartTime DATETIME,
    QueryText NVARCHAR(MAX),
    Reason NVARCHAR(50)
);

CREATE TABLE #DebugLongRunning (
    SPID INT,
    LoginName NVARCHAR(128),
    StartTime DATETIME,
    MinutesRunning INT,
    QueryText NVARCHAR(MAX)
);

SELECT 
    @TotalCPUTime = SUM(s.cpu_time),
    @TotalDiskIO = SUM(COALESCE(r.reads, 0) + COALESCE(r.writes, 0))
FROM sys.dm_exec_sessions s
LEFT JOIN sys.dm_exec_requests r ON s.session_id = r.session_id
WHERE s.is_user_process = 1;

INSERT INTO #CurrentUsage (SPID, LoginName, HostName, ProgramName, CPUTime, DiskIO, StartTime, QueryText, Reason)
SELECT 
    s.session_id AS SPID,
    s.login_name AS LoginName,
    s.host_name AS HostName,
    s.program_name AS ProgramName,
    r.cpu_time AS CPUTime,
    (r.reads + r.writes) AS DiskIO,
    r.start_time AS StartTime,
    t.text AS QueryText,
    CASE 
        WHEN (@TotalCPUTime > 0 AND CAST(r.cpu_time AS FLOAT) / @TotalCPUTime * 100 > @ThresholdPercent) THEN 'HighCPU'
        WHEN (@TotalDiskIO > 0 AND CAST(r.reads + r.writes AS FLOAT) / @TotalDiskIO * 100 > @ThresholdPercent) THEN 'HighIO'
    END AS Reason
FROM sys.dm_exec_sessions s
JOIN sys.dm_exec_requests r ON s.session_id = r.session_id
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) t
WHERE s.is_user_process = 1
AND (
    (@TotalCPUTime > 0 AND CAST(r.cpu_time AS FLOAT) / @TotalCPUTime * 100 > @ThresholdPercent)
    OR (@TotalDiskIO > 0 AND CAST(r.reads + r.writes AS FLOAT) / @TotalDiskIO * 100 > @ThresholdPercent)
);

INSERT INTO #DebugLongRunning (SPID, LoginName, StartTime, MinutesRunning, QueryText)
SELECT 
    s.session_id AS SPID,
    s.login_name AS LoginName,
    r.start_time AS StartTime,
    DATEDIFF(MINUTE, r.start_time, GETDATE()) AS MinutesRunning,
    t.text AS QueryText
FROM sys.dm_exec_sessions s
JOIN sys.dm_exec_requests r ON s.session_id = r.session_id
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) t
WHERE s.is_user_process = 1
AND DATEDIFF(MINUTE, r.start_time, GETDATE()) > @LongRunningThresholdMinutes;

INSERT INTO #CurrentUsage (SPID, LoginName, HostName, ProgramName, CPUTime, DiskIO, StartTime, QueryText, Reason)
SELECT 
    s.session_id AS SPID,
    s.login_name AS LoginName,
    s.host_name AS HostName,
    s.program_name AS ProgramName,
    r.cpu_time AS CPUTime,
    (r.reads + r.writes) AS DiskIO,
    r.start_time AS StartTime,
    t.text AS QueryText,
    'LongRunning' AS Reason
FROM sys.dm_exec_sessions s
JOIN sys.dm_exec_requests r ON s.session_id = r.session_id
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) t
WHERE s.is_user_process = 1
AND DATEDIFF(MINUTE, r.start_time, GETDATE()) > @LongRunningThresholdMinutes;

SELECT * FROM #DebugLongRunning;
SELECT * FROM #CurrentUsage WHERE Reason = 'LongRunning';

SELECT * INTO #PreMergeDebug FROM #CurrentUsage;
SELECT * FROM #PreMergeDebug WHERE Reason = 'LongRunning';

MERGE INTO dbo.ResourceHogLog AS target
USING #CurrentUsage AS source
ON target.SPID = source.SPID AND target.Status = 'Active'
WHEN MATCHED THEN
    UPDATE SET 
        LastCheckTime = GETDATE(),
        CPUTime = source.CPUTime,
        DiskIO = source.DiskIO,
        QueryText = source.QueryText,
        Reason = source.Reason
WHEN NOT MATCHED THEN
    INSERT (SPID, LoginName, HostName, ProgramName, CPUTime, DiskIO, StartTime, LastCheckTime, Status, QueryText, Reason)
    VALUES (source.SPID, source.LoginName, source.HostName, source.ProgramName, source.CPUTime, source.DiskIO, source.StartTime, GETDATE(), 'Active', source.QueryText, source.Reason);

-- Skip cleanup for now
--UPDATE dbo.ResourceHogLog
--SET Status = 'Completed'
--WHERE Status = 'Active'
--AND SPID NOT IN (SELECT session_id FROM sys.dm_exec_sessions);

DROP TABLE #CurrentUsage;
DROP TABLE #DebugLongRunning;
DROP TABLE #PreMergeDebug;

-- Step 3: Notification Logic
DECLARE @SPID INT, @LoginName NVARCHAR(128), @HostName NVARCHAR(128), @ProgramName NVARCHAR(128), 
        @CPUTime BIGINT, @DiskIO BIGINT, @StartTime DATETIME, @QueryText NVARCHAR(MAX), @Reason NVARCHAR(50);
DECLARE @EmailBody NVARCHAR(MAX), @Recipients NVARCHAR(255);

CREATE TABLE #CursorDebug (
    SPID INT,
    LoginName NVARCHAR(128),
    Reason NVARCHAR(50),
    MinutesRunning INT,
    Status NVARCHAR(50),
    Recipients NVARCHAR(255)
);

DECLARE hog_cursor CURSOR FOR
SELECT 
    r.SPID, r.LoginName, r.HostName, r.ProgramName, r.CPUTime, r.DiskIO, r.StartTime, r.QueryText, r.Reason
FROM dbo.ResourceHogLog r
LEFT JOIN dbo.NotificationLog n ON r.SPID = n.SPID
WHERE r.Status = 'Active'
AND n.SPID IS NULL
AND r.LoginName NOT LIKE 'NIGHTINGALE\SVC_%'
AND (
    (r.Reason IN ('HighCPU', 'HighIO') AND DATEDIFF(MINUTE, r.StartTime, GETDATE()) >= @MinDurationMinutes)
    OR (r.Reason = 'LongRunning')
);

OPEN hog_cursor;
FETCH NEXT FROM hog_cursor INTO @SPID, @LoginName, @HostName, @ProgramName, @CPUTime, @DiskIO, @StartTime, @QueryText, @Reason;

WHILE @@FETCH_STATUS = 0
BEGIN
    DECLARE @DurationMinutes INT = DATEDIFF(MINUTE, @StartTime, GETDATE());

    IF @LoginName LIKE '%\%'
    BEGIN
        SET @Recipients = REPLACE(@LoginName, 'NIGHTINGALE\', '') + '@consumerdirectcare.com';
    END
    ELSE
    BEGIN
        SELECT @Recipients = STRING_AGG(EmailAddress, ';') 
        FROM dbo.DBATeam;
        IF @Recipients IS NULL OR @Recipients = ''
            SET @Recipients = 'stephenm@consumerdirectcare.com';
    END;

    INSERT INTO #CursorDebug (SPID, LoginName, Reason, MinutesRunning, Status, Recipients)
    VALUES (@SPID, @LoginName, @Reason, @DurationMinutes, 'Fetched', @Recipients);

    SET @EmailBody = N'
        <html>
        <body>
        <h3>Warning: Your Query is ' + 
        CASE @Reason 
            WHEN 'HighCPU' THEN 'Consuming Excessive CPU'
            WHEN 'HighIO' THEN 'Consuming Excessive Disk I/O'
            ELSE 'Running Too Long'
        END + N'</h3>
        <p>Your session (SPID ' + CAST(@SPID AS NVARCHAR(10)) + ') on ' + @HostName + ' is ' +
        CASE @Reason 
            WHEN 'HighCPU' THEN 'using excessive CPU, affecting server performance.'
            WHEN 'HighIO' THEN 'using excessive Disk I/O, affecting server performance.'
            ELSE 'running for ' + CAST(@DurationMinutes AS NVARCHAR(10)) + ' minutes, which is too long.'
        END + N'</p>
        <p><b>Details:</b></p>
        <ul>
            <li>Program: ' + ISNULL(@ProgramName, 'N/A') + '</li>
            <li>CPU Time: ' + CAST(@CPUTime AS NVARCHAR(20)) + ' ms</li>
            <li>Disk I/O: ' + CAST(@DiskIO AS NVARCHAR(20)) + ' operations</li>
            <li>Start Time: ' + CONVERT(NVARCHAR(20), @StartTime, 120) + '</li>
            <li>Query: <pre>' + ISNULL(@QueryText, 'N/A') + '</pre></li>
        </ul>
        <p>Please optimize or cancel your query. If it does not complete within the next ' + CAST(@KillWarningMinutes AS NVARCHAR(10)) + ' minutes, we may terminate the session to protect server performance.</p>
        </body>
        </html>';

    BEGIN TRY
        IF @Recipients IS NOT NULL AND @Recipients <> ''
        BEGIN
            EXEC msdb.dbo.sp_send_dbmail
                @profile_name = 'SQLServer',
                @recipients = @Recipients,
                @subject = 'SQL Server Resource Usage Alert',
                @body = @EmailBody,
                @body_format = 'HTML';

            INSERT INTO dbo.NotificationLog (SPID, LoginName, EmailSentTo, SentTime, Message)
            VALUES (@SPID, @LoginName, @Recipients, GETDATE(), @EmailBody);

            UPDATE dbo.ResourceHogLog
            SET Status = 'Notified'
            WHERE SPID = @SPID;
        END
        ELSE
        BEGIN
            INSERT INTO dbo.ErrorLog (ErrorMessage, ErrorDate)
            VALUES ('No valid recipients for SPID ' + CAST(@SPID AS NVARCHAR(10)) + ', Login ' + @LoginName, GETDATE());
        END
    END TRY
    BEGIN CATCH
        INSERT INTO dbo.ErrorLog (ErrorMessage, ErrorDate)
        VALUES ('Failed to send email for SPID ' + CAST(@SPID AS NVARCHAR(10)) + ', Login ' + @LoginName + ': ' + ERROR_MESSAGE(), GETDATE());
    END CATCH;

    FETCH NEXT FROM hog_cursor INTO @SPID, @LoginName, @HostName, @ProgramName, @CPUTime, @DiskIO, @StartTime, @QueryText, @Reason;
END;

SELECT * FROM #CursorDebug;

CLOSE hog_cursor;
DEALLOCATE hog_cursor;

DROP TABLE #CursorDebug;


---- Step 4: Optional Session Termination --NOT YET TESTED / IMPLEMENTED - McCord 20250413
--DECLARE @KillSPID INT, @KillCommand NVARCHAR(100);

--DECLARE kill_cursor CURSOR FOR
--SELECT SPID
--FROM dbo.ResourceHogLog
--WHERE Status = 'Notified'
--AND DATEDIFF(MINUTE, LastCheckTime, GETDATE()) >= @KillWarningMinutes;

--OPEN kill_cursor;
--FETCH NEXT FROM kill_cursor INTO @KillSPID;

--WHILE @@FETCH_STATUS = 0
--BEGIN
--    SET @KillCommand = 'KILL ' + CAST(@KillSPID AS NVARCHAR(10));
--    BEGIN TRY
--        EXEC sp_executesql @KillCommand;
--        UPDATE dbo.ResourceHogLog
--        SET Status = 'Terminated'
--        WHERE SPID = @KillSPID;
--    END TRY
--    BEGIN CATCH
--        INSERT INTO dbo.ErrorLog (ErrorMessage, ErrorDate)
--        VALUES ('Failed to kill SPID ' + CAST(@KillSPID AS NVARCHAR(10)) + ': ' + ERROR_MESSAGE(), GETDATE());
--    END CATCH;

--    FETCH NEXT FROM kill_cursor INTO @KillSPID;
--END;

--CLOSE kill_cursor;
--DEALLOCATE kill_cursor;