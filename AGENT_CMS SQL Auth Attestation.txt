USE [msdb]
GO

/****** Object:  Job [[DBA] - CMS SQL Auth Attestation]    Script Date: 4/24/2024 1:15:55 PM ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Uncategorized (Local)]]    Script Date: 4/24/2024 1:15:55 PM ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'[DBA] - CMS SQL Auth Attestation', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'No description available.', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'sa', @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Generate SQL Auth List from LSOs]    Script Date: 4/24/2024 1:15:56 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Generate SQL Auth List from LSOs', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'

--DROP THE TEMP TABLE BEFORE STARTING
DROP TABLE IF EXISTS #sql_login_check

--TRUNCATE THE STATIC COMMAND TABLE (STATIC BECAUSE IT HOLDS VALUES FROM MULTIPLE UPSTREAM TABLES)
TRUNCATE TABLE dba_sql_auth_login_check_command

--TRUNCATE THE STATIC COMBINED RESULTS TABLE (STATIC BECAUSE IT GETS POPULATED SERIALLY FROM MULTIPLE UPSTREAM VALUES) 
TRUNCATE TABLE weekly_sql_auth_check_combined


--LOOP THROUGH THE CMS TABLE, OBTAIN LINKED SERVER NAME
--DYNAMICALLY CREATE INSERT STATEMENT FOR EACH LINKED SERVER THAT WAS OBTAINED
DECLARE @server_id CHAR(25)

SET ROWCOUNT 0

SELECT * INTO #sql_login_check 
	FROM sys.servers
	WHERE is_linked = 1 --is an LSO
	AND name LIKE ''CMS_%'' --is an LSO created for Central Management


SET ROWCOUNT 1

SELECT @server_id = server_id FROM #sql_login_check

WHILE @@ROWCOUNT <> 0
BEGIN
    SET ROWCOUNT 0

INSERT INTO [spc_dba_utilities].[dbo].[dba_sql_auth_login_check_command]
SELECT 
''INSERT INTO [spc_dba_utilities].[dbo].[weekly_sql_auth_check_combined]
([ServerInstanceName]
,[AccountName]
,[hasaccess]
,[sysadmin]
,[securityadmin]
,[PasswordLastSetTime]
,[IsMustChange]
,[DaysUntilExpiration]
,[IsExpired]
,[IsLocked]
,[LockoutTime]
,[BadPasswordCount]
,[BadPasswordTime]
,[DefaultLanguage]
,[DefaultDatabase])
SELECT
 [ServerInstanceName]
,[AccountName]
,[hasaccess]
,[sysadmin]
,[securityadmin]
,[PasswordLastSetTime]
,[IsMustChange]
,[DaysUntilExpiration]
,[IsExpired]
,[IsLocked]
,[LockoutTime]
,[BadPasswordCount]
,[BadPasswordTime]
,[DefaultLanguage]
,[DefaultDatabase]
FROM ['' + name + ''].[spc_dba_utilities].[dbo].[weekly_sql_auth_check] GO''
FROM #sql_login_check
WHERE server_id = @server_id
DELETE #sql_login_check WHERE server_id = @server_id

    SET ROWCOUNT 1
    
SELECT @server_id = server_id FROM #sql_login_check
END
SET ROWCOUNT 0






--DROP THE TEMP TABLE BEFORE STARTING
DROP TABLE IF EXISTS #SQLAuthCommandExec

--RECREATE THE TEMP TABLE FOR EACH INVOCATION
CREATE TABLE #SQLAuthCommandExec (Command varchar(max), OrderBy INT IDENTITY(1,1))

--INSERT DYNAMICALLY CREATED STATEMENTS INTO A TABLE THAT WILL ACTUALLY EXECUTE THOSE STATEMENTS
INSERT INTO #SQLAuthCommandExec 
SELECT * FROM [spc_dba_utilities].[dbo].[dba_sql_auth_login_check_command]

--LOOP THROUGH TABLE, EXECUTE EACH STATEMENT PRESENT
DECLARE @sqlcmd VARCHAR(MAX);

SET @sqlcmd = (
SELECT STRING_AGG(Command,'';'' + CHAR(10)) WITHIN GROUP (ORDER BY [OrderBy]) as cmd
FROM #SQLAuthCommandExec
)

--PRINT(@sqlcmd); --FOR DEBUGGING
EXEC(@sqlcmd);


', 
		@database_name=N'spc_dba_utilities', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:
GO

