Sure! Here is a PowerShell script that checks the status of a specified Windows Service and sends an email notification if the service is stopped.

Here’s a script that does that:

# Define the parameters
$serviceName = "YourServiceName"  # Specify the name of the service you want to monitor
$emailFrom = "your-email@example.com"
$emailTo = "recipient-email@example.com"
$smtpServer = "smtp.example.com"
$smtpPort = 587  # or the port your SMTP server uses
$smtpUser = "your-smtp-username"
$smtpPassword = "your-smtp-password"
$subject = "Service Stopped Notification"
$body = "The service $serviceName has stopped on the server."

# Function to check the service status and send an email if stopped
function Check-ServiceStatus {
    $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
    if ($service -eq $null) {
        Write-Output "Service $serviceName does not exist."
        return
    }
    
    if ($service.Status -eq 'Stopped') {
        # Create the email message
        $message = New-Object system.net.mail.mailmessage
        $message.from = $emailFrom
        $message.To.Add($emailTo)
        $message.Subject = $subject
        $message.Body = $body
    
        # SMTP server configuration
        $smtp = New-Object Net.Mail.SmtpClient($smtpServer, $smtpPort)
        $smtp.EnableSsl = $true
        $smtp.Credentials = New-Object System.Net.NetworkCredential($smtpUser, $smtpPassword)
    
        # Send the email
        try {
            $smtp.Send($message)
            Write-Output "Notification email sent successfully."
        } catch {
            Write-Output "Failed to send email: $_"
        }
    } else {
        Write-Output "Service $serviceName is running."
    }
}

# Call the function
Check-ServiceStatus
Make sure to replace the placeholders with your actual service name, email addresses, SMTP server details, and credentials. Save this script with a .ps1 extension, for example, CheckServiceStatus.ps1.

You can then schedule this script to run at regular intervals using the Windows Task Scheduler to continuously monitor the service status.

how do I mask the password variable in that script?
For security reasons, it's best not to hard-code your SMTP password directly into your script. Instead, you can use SecureString to help mask the password. Here's how you can modify the script to use a SecureString for the SMTP password:

Read the password securely: You can store the password securely and read it at runtime.

Convert the secure password to a usable format: Use ConvertFrom-SecureString and ConvertTo-SecureString to manage the secure password.

Here’s the updated script with a secure password handling method:

# Define the parameters
$serviceName = "YourServiceName"  # Specify the name of the service you want to monitor
$emailFrom = "your-email@example.com"
$emailTo = "recipient-email@example.com"
$smtpServer = "smtp.example.com"
$smtpPort = 587  # or the port your SMTP server uses
$smtpUser = "your-smtp-username"
$subject = "Service Stopped Notification"
$body = "The service $serviceName has stopped on the server."

# Function to get the secure password
function Get-SecurePassword {
    $passwordFilePath = "C:\path\to\password.txt"  # Path to the file where the secure string password is stored

    if (!(Test-Path $passwordFilePath)) {
        # Generate and save secure password string
        $securePassword = Read-Host "Enter SMTP password" -AsSecureString
        $securePassword | ConvertFrom-SecureString | Set-Content $passwordFilePath
    } else {
        # Read and convert the secure password
        $securePassword = Get-Content $passwordFilePath | ConvertTo-SecureString
    }
    
    return $securePassword
}

# Function to check the service status and send an email if stopped
function Check-ServiceStatus {
    $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
    if ($service -eq $null) {
        Write-Output "Service $serviceName does not exist."
        return
    }
    
    if ($service.Status -eq 'Stopped') {
        # Get secure password
        $securePassword = Get-SecurePassword
        $password = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto(
            [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($securePassword)
        )

        # Create the email message
        $message = New-Object system.net.mail.mailmessage
        $message.from = $emailFrom
        $message.To.Add($emailTo)
        $message.Subject = $subject
        $message.Body = $body
    
        # SMTP server configuration
        $smtp = New-Object Net.Mail.SmtpClient($smtpServer, $smtpPort)
        $smtp.EnableSsl = $true
        $smtp.Credentials = New-Object System.Net.NetworkCredential($smtpUser, $password)
    
        # Send the email
        try {
            $smtp.Send($message)
            Write-Output "Notification email sent successfully."
        } catch {
            Write-Output "Failed to send email: $_"
        }
    } else {
        Write-Output "Service $serviceName is running."
    }
}

# Call the function
Check-ServiceStatus
Steps to Set Up:
Create Password File: The first time you run the script, it will prompt you to enter the SMTP password and save it to a secure string file at the specified path. Make sure to replace "C:\path\to\password.txt" with an appropriate file path on your system.

Schedule Script Execution: You can now schedule this script using Windows Task Scheduler to run at your desired intervals.

This way, your SMTP password is stored as an encrypted string, and it won't be exposed in plaintext within your script.