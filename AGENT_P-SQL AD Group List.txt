USE [msdb]
GO

/****** Object:  Job [[DBA] - P-SQL AD Group List]    Script Date: 4/24/2024 1:14:24 PM ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Uncategorized (Local)]]    Script Date: 4/24/2024 1:14:25 PM ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'[DBA] - P-SQL AD Group List', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=2, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'Generate and send a list of AD Groups', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'sa', 
		@notify_email_operator_name=N'Steve_and_Josh', @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Generate and send PROD]    Script Date: 4/24/2024 1:14:26 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Generate and send PROD', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'
--execute proc
EXEC [spc_dba_utilities].[dbo].[dba_sp_list_prod_ad_groups]


--Dump proc output into #temp table

SELECT * INTO #prodadgroups
FROM spc_dba_utilities.dbo.dba_tmp_list_prod_ad_groups


DECLARE @CountValue INT
SELECT @CountValue = COUNT(*)
FROM spc_dba_utilities..dba_tmp_list_prod_ad_groups

IF (@CountValue = 0)
BEGIN 

--Declare variables
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)
--DECLARE @xml NVARCHAR(MAX) --XML VARIABLE DECLARED IN ACCOUNTS DETECTED SECTION
DECLARE @blankbody NVARCHAR(MAX)

--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - ActiveDirectory Group List - PRD ''
SET @CombinedSubject = @ServerName + @MailSubject


SET @blankbody = ''NO ACCOUNTS WITH ELEVATED ACCESS DETECTED ON THE INSTANCE

~*~NFAR~*~''

--Trigger the email 
EXEC msdb.dbo.sp_send_dbmail
	@profile_name = ''SQLServer''
,	@recipients = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com''
,	@subject = @MailSubject
,	@body = @blankbody
,   @body_format = ''HTML'';

END

ELSE 

BEGIN

-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= ''
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #orng {color: orange;}
 #odd {background-color: lightgrey}
</style> </head>'';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);


DECLARE @recipients VARCHAR(MAX) = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com; scott.hanks@sierraspace.com; casey.marincin@sierraspace.com; liz.mercado@sierraspace.com'' 
--DECLARE @ServerName VARCHAR(255)
--DECLARE @MailSubject VARCHAR(255)
--DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - ActiveDirectory Group List - PRD ''
SET @CombinedSubject = @ServerName + @MailSubject


 
--get core xml string
SET @xml = CAST(( SELECT 
[cn] AS ''td''
,''''
FROM  #prodadgroups
ORDER BY [cn]
FOR XML PATH(''tr''), ELEMENTS ) AS NVARCHAR(MAX));


--EVALUATE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, ''<td>zg'', ''<td id="g">''); -- Green
SET @xml=REPLACE(@xml, ''<td>zr'', ''<td id="r">''); -- Red
SET @xml=REPLACE(@xml, ''<td>zorng'', ''<td id="orng">''); -- Orange

--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''''
, @pos = CHARINDEX(''<tr>'', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX(''<tr>'', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
SET @s += @ts;

--WRITE RESULT SET TO EMAIL BODY
SET @body +=
''<body>
<H3>ActiveDirectory Security Groups - PRD</H3>
<BR>
Below is a list of security groups within ActiveDirectory that contain the following search strings:

<p style="margin-left:50px;">
SEARCH TERM 1:  P-SQL
<BR><BR>
SEARCH TERM 2:  *PRD*
</p>
<BR><BR>
This list can be referred to determine whether or not passthrough group access from ActiveDirectory, to an attribute within SQL Server is available.
<BR><BR>
<p style="margin-left:50px;">
-i.e., if the group you are looking for is not present in this list, then it is not <i>(and can not be)</i> mapped to any facet of SQL Server.  
</p>
<BR>
<table border = 1> 
<tr>

<th> GROUP NAME </th> 



</tr>'' 
+ @s+''</table> </body> </html>
<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions
<BR><BR><BR><BR>

'' ;
 


EXEC msdb.dbo.sp_send_dbmail
@profile_name = ''SQLServer''
,@recipients = @recipients
--,@recipients = ''stephen.mccord@sierraspace.com'' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format =''HTML''
END


DROP TABLE #prodadgroups', 
		@database_name=N'master', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Generate and send UAT]    Script Date: 4/24/2024 1:14:26 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Generate and send UAT', 
		@step_id=2, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'
--execute proc
EXEC [spc_dba_utilities].[dbo].[dba_sp_list_uat_ad_groups]


--Dump proc output into #temp table

SELECT * INTO #uatadgroups
FROM spc_dba_utilities.dbo.dba_tmp_list_uat_ad_groups


DECLARE @CountValue INT
SELECT @CountValue = COUNT(*)
FROM spc_dba_utilities..dba_tmp_list_uat_ad_groups

IF (@CountValue = 0)
BEGIN 

--Declare variables
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)
--DECLARE @xml NVARCHAR(MAX) --XML VARIABLE DECLARED IN ACCOUNTS DETECTED SECTION
DECLARE @blankbody NVARCHAR(MAX)

--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - ActiveDirectory Group List - UAT ''
SET @CombinedSubject = @ServerName + @MailSubject


SET @blankbody = ''NO ACCOUNTS WITH ELEVATED ACCESS DETECTED ON THE INSTANCE

~*~NFAR~*~''

--Trigger the email 
EXEC msdb.dbo.sp_send_dbmail
	@profile_name = ''SQLServer''
,	@recipients = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com''
,	@subject = @MailSubject
,	@body = @blankbody
,   @body_format = ''HTML'';

END

ELSE 

BEGIN

-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= ''
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #orng {color: orange;}
 #odd {background-color: lightgrey}
</style> </head>'';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);


DECLARE @recipients VARCHAR(MAX) = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com; scott.hanks@sierraspace.com; casey.marincin@sierraspace.com; liz.mercado@sierraspace.com'' 
--DECLARE @ServerName VARCHAR(255)
--DECLARE @MailSubject VARCHAR(255)
--DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - ActiveDirectory Group List - UAT ''
SET @CombinedSubject = @ServerName + @MailSubject


 
--get core xml string
SET @xml = CAST(( SELECT 
[cn] AS ''td''
,''''
FROM  #uatadgroups
ORDER BY [cn]
FOR XML PATH(''tr''), ELEMENTS ) AS NVARCHAR(MAX));


--EVALUATE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, ''<td>zg'', ''<td id="g">''); -- Green
SET @xml=REPLACE(@xml, ''<td>zr'', ''<td id="r">''); -- Red
SET @xml=REPLACE(@xml, ''<td>zorng'', ''<td id="orng">''); -- Orange

--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''''
, @pos = CHARINDEX(''<tr>'', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX(''<tr>'', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
SET @s += @ts;

--WRITE RESULT SET TO EMAIL BODY
SET @body +=
''<body>
<H3>ActiveDirectory Security Groups - UAT</H3>
<BR>
Below is a list of security groups within ActiveDirectory that contain the following search strings:

<p style="margin-left:50px;">
SEARCH TERM 1:  P-SQL
<BR><BR>
SEARCH TERM 2:  *UAT*
</p>
<BR><BR>
This list can be referred to determine whether or not passthrough group access from ActiveDirectory, to an attribute within SQL Server is available.
<BR><BR>
<p style="margin-left:50px;">
-i.e., if the group you are looking for is not present in this list, then it is not <i>(and can not be)</i> mapped to any facet of SQL Server.  
</p>
<BR>
<table border = 1> 
<tr>

<th> GROUP NAME </th> 



</tr>'' 
+ @s+''</table> </body> </html>
<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions
<BR><BR><BR><BR>

'' ;
 


EXEC msdb.dbo.sp_send_dbmail
@profile_name = ''SQLServer''
,@recipients = @recipients
--,@recipients = ''stephen.mccord@sierraspace.com'' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format =''HTML''
END


DROP TABLE #uatadgroups', 
		@database_name=N'master', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Generate and send DEV]    Script Date: 4/24/2024 1:14:26 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Generate and send DEV', 
		@step_id=3, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'
--execute proc
EXEC [spc_dba_utilities].[dbo].[dba_sp_list_dev_ad_groups]


--Dump proc output into #temp table

SELECT * INTO #devadgroups
FROM spc_dba_utilities.dbo.dba_tmp_list_dev_ad_groups


DECLARE @CountValue INT
SELECT @CountValue = COUNT(*)
FROM spc_dba_utilities..dba_tmp_list_dev_ad_groups

IF (@CountValue = 0)
BEGIN 

--Declare variables
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)
--DECLARE @xml NVARCHAR(MAX) --XML VARIABLE DECLARED IN ACCOUNTS DETECTED SECTION
DECLARE @blankbody NVARCHAR(MAX)

--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - ActiveDirectory Group List - DEV ''
SET @CombinedSubject = @ServerName + @MailSubject


SET @blankbody = ''NO ACCOUNTS WITH ELEVATED ACCESS DETECTED ON THE INSTANCE

~*~NFAR~*~''

--Trigger the email 
EXEC msdb.dbo.sp_send_dbmail
	@profile_name = ''SQLServer''
,	@recipients = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com''
,	@subject = @MailSubject
,	@body = @blankbody
,   @body_format = ''HTML'';

END

ELSE 

BEGIN

-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= ''
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #orng {color: orange;}
 #odd {background-color: lightgrey}
</style> </head>'';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);


DECLARE @recipients VARCHAR(MAX) = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com; scott.hanks@sierraspace.com; casey.marincin@sierraspace.com; liz.mercado@sierraspace.com'' 
--DECLARE @ServerName VARCHAR(255)
--DECLARE @MailSubject VARCHAR(255)
--DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - ActiveDirectory Group List - DEV ''
SET @CombinedSubject = @ServerName + @MailSubject


 
--get core xml string
SET @xml = CAST(( SELECT 
[cn] AS ''td''
,''''
FROM  #DEVadgroups
ORDER BY [cn]
FOR XML PATH(''tr''), ELEMENTS ) AS NVARCHAR(MAX));


--EVALDEVE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, ''<td>zg'', ''<td id="g">''); -- Green
SET @xml=REPLACE(@xml, ''<td>zr'', ''<td id="r">''); -- Red
SET @xml=REPLACE(@xml, ''<td>zorng'', ''<td id="orng">''); -- Orange

--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''''
, @pos = CHARINDEX(''<tr>'', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX(''<tr>'', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
SET @s += @ts;

--WRITE RESULT SET TO EMAIL BODY
SET @body +=
''<body>
<H3>ActiveDirectory Security Groups - DEV</H3>
<BR>
Below is a list of security groups within ActiveDirectory that contain the following search strings:

<p style="margin-left:50px;">
SEARCH TERM 1:  P-SQL
<BR><BR>
SEARCH TERM 2:  *DEV*
</p>
<BR><BR>
This list can be referred to determine whether or not passthrough group access from ActiveDirectory, to an attribute within SQL Server is available.
<BR><BR>
<p style="margin-left:50px;">
-i.e., if the group you are looking for is not present in this list, then it is not <i>(and can not be)</i> mapped to any facet of SQL Server.  
</p>
<BR>
<table border = 1> 
<tr>

<th> GROUP NAME </th> 



</tr>'' 
+ @s+''</table> </body> </html>
<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions
<BR><BR><BR><BR>

'' ;
 


EXEC msdb.dbo.sp_send_dbmail
@profile_name = ''SQLServer''
,@recipients = @recipients
--,@recipients = ''stephen.mccord@sierraspace.com'' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format =''HTML''
END


DROP TABLE #devadgroups', 
		@database_name=N'master', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Generate and send TEST]    Script Date: 4/24/2024 1:14:26 PM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Generate and send TEST', 
		@step_id=4, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'
--execute proc
EXEC [spc_dba_utilities].[dbo].[dba_sp_list_test_ad_groups]


--Dump proc output into #temp table

SELECT * INTO #testadgroups
FROM spc_dba_utilities.dbo.dba_tmp_list_test_ad_groups


DECLARE @CountValue INT
SELECT @CountValue = COUNT(*)
FROM spc_dba_utilities..dba_tmp_list_test_ad_groups

IF (@CountValue = 0)
BEGIN 

--Declare variables
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)
--DECLARE @xml NVARCHAR(MAX) --XML VARIABLE DECLARED IN ACCOUNTS DETECTED SECTION
DECLARE @blankbody NVARCHAR(MAX)

--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - ActiveDirectory Group List - TEST ''
SET @CombinedSubject = @ServerName + @MailSubject


SET @blankbody = ''NO ACCOUNTS WITH ELEVATED ACCESS DETECTED ON THE INSTANCE

~*~NFAR~*~''

--Trigger the email 
EXEC msdb.dbo.sp_send_dbmail
	@profile_name = ''SQLServer''
,	@recipients = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com''
,	@subject = @MailSubject
,	@body = @blankbody
,   @body_format = ''HTML'';

END

ELSE 

BEGIN

-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= ''
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #orng {color: orange;}
 #odd {background-color: lightgrey}
</style> </head>'';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);


DECLARE @recipients VARCHAR(MAX) = ''stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com; scott.hanks@sierraspace.com; casey.marincin@sierraspace.com; liz.mercado@sierraspace.com'' 
--DECLARE @ServerName VARCHAR(255)
--DECLARE @MailSubject VARCHAR(255)
--DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = ''[FOR INFORMATION / REVIEW] - ActiveDirectory Group List - TEST ''
SET @CombinedSubject = @ServerName + @MailSubject


 
--get core xml string
SET @xml = CAST(( SELECT 
[cn] AS ''td''
,''''
FROM  #testadgroups
ORDER BY [cn]
FOR XML PATH(''tr''), ELEMENTS ) AS NVARCHAR(MAX));


--EVALtestE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, ''<td>zg'', ''<td id="g">''); -- Green
SET @xml=REPLACE(@xml, ''<td>zr'', ''<td id="r">''); -- Red
SET @xml=REPLACE(@xml, ''<td>zorng'', ''<td id="orng">''); -- Orange

--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''''
, @pos = CHARINDEX(''<tr>'', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX(''<tr>'', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, ''<tr>'', ''<tr id="odd">'');
SET @s += @ts;

--WRITE RESULT SET TO EMAIL BODY
SET @body +=
''<body>
<H3>ActiveDirectory Security Groups - test</H3>
<BR>
Below is a list of security groups within ActiveDirectory that contain the following search strings:

<p style="margin-left:50px;">
SEARCH TERM 1:  P-SQL
<BR><BR>
SEARCH TERM 2:  *TEST*
</p>
<BR><BR>
This list can be referred to determine whether or not passthrough group access from ActiveDirectory, to an attribute within SQL Server is available.
<BR><BR>
<p style="margin-left:50px;">
-i.e., if the group you are looking for is not present in this list, then it is not <i>(and can not be)</i> mapped to any facet of SQL Server.  
</p>
<BR>
<table border = 1> 
<tr>

<th> GROUP NAME </th> 



</tr>'' 
+ @s+''</table> </body> </html>
<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions
<BR><BR><BR><BR>

'' ;
 


EXEC msdb.dbo.sp_send_dbmail
@profile_name = ''SQLServer''
,@recipients = @recipients
--,@recipients = ''stephen.mccord@sierraspace.com'' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format =''HTML''
END


DROP TABLE #testadgroups', 
		@database_name=N'master', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'Weekdays - 10AM', 
		@enabled=1, 
		@freq_type=8, 
		@freq_interval=62, 
		@freq_subday_type=1, 
		@freq_subday_interval=0, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=1, 
		@active_start_date=20240423, 
		@active_end_date=99991231, 
		@active_start_time=100000, 
		@active_end_time=235959, 
		@schedule_uid=N'cecdb2e7-1371-4c56-9383-129700bcc71a'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:
GO

