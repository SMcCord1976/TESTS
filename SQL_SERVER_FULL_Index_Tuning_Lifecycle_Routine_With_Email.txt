--USE [master]
--GO

--/****** Object:  StoredProcedure [dbo].[sp_unused_indexes]    Script Date: 8/28/2024 8:03:02 AM ******/
--SET ANSI_NULLS ON
--GO

--SET QUOTED_IDENTIFIER ON
--GO




--CREATE PROCEDURE [dbo].[sp_unused_indexes]
--AS

--BEGIN 


--/*===================================================================================*/
--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/**************************************************************************************

--This should be step ONE of the Tuning Lifecycle. 

--Stored Procedure created on database to be queried.

--Temp table created within administrative database to eliminate contention.


--**************************************************************************************/
--/*===================================================================================*/
--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/************************************************************************************** 

--The output of this query is SQL Server essentially looking at the statistics of all the queries run since the last server reboot, and outlining 
--which indexes have a low read vs. write ratio.  Indexes are useful for the retrieval (reading) of data.  


--Utilize the results generated from this process as an indication of where to start dedicating research/development efforts, 
--*NOT* as a hard and fast directive to remove the indexes as suggested without further research

--Column descriptions:
	
--	Database_Name - The name of the database on which the objects reside

--	Object_Name - The object on which the index resides

--	Index_Name - The name of the index
				  
--	Reads - The number of reads generated using the columns contained in the index

--	Writes - The number of writes to columns contained in the index 
	
--	rows - The number of rows in the table

--	Reads_Per_Writes - The percentage of reads per writes.  Keep in mind that indexes are extremely useful for data retrieval, 
--				    but are a performance inhibitor to inserts, updates and deletes.  Therefore an index with a LOW number of reads, but a HIGH
--				    number of writes is quite possibly an unnecessary index
					 
--	Drop_Index_Statement - After a determination has been made about whether or not to remove the suggested indexes, 
--					   the value in this column can be copied and pasted to a query editor window and executed to actually drop 
--					   the suggested index


--USAGE:
----EXEC [dba_sp_unused_indexes] --<-- to generate results


----select * from spc_dba_utilities..Unused_Indexes_TEMP --<-- to review results



--**************************************************************************************/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
--/*===================================================================================*/


----Clean up temp tables from last invocation
--IF EXISTS (SELECT * FROM spc_dba_utilities.sys.objects WHERE object_id = OBJECT_ID(N'[spc_dba_utilities].[dbo].[Unused_Indexes_TEMP]') AND type in (N'U'))
--BEGIN
--DROP TABLE spc_dba_utilities..dba_unused_indexes_TEMP
--END



--SELECT 
--	db_name () as 'Database Name'
--	,o.NAME AS 'Object_Name'
--	,i.NAME AS 'Index_Name'
--	--, i.index_id as 'Index_ID'   
--	,user_seeks + user_scans + user_lookups AS 'Reads'
--	,user_updates AS 'Writes'
--	,rows = (
--		SELECT SUM(p.rows)
--		FROM sys.partitions p
--		WHERE p.index_id = s.index_id
--			AND s.object_id = p.object_id
--		)
--	,CASE 
--		WHEN s.user_updates < 1
--			THEN 100
--		ELSE 1.00 * (s.user_seeks + s.user_scans + s.user_lookups) / s.user_updates
--		END AS Reads_Per_Writes
--	,'DROP INDEX ' + QUOTENAME(i.NAME) + ' ON ' + QUOTENAME(c.NAME) + '.' + QUOTENAME(OBJECT_NAME(s.object_id)) AS 'Drop_Index_Statement'
--	, getdate() as [QueryDate]
--INTO spc_dba_utilities..dba_unused_indexes_TEMP
--FROM sys.dm_db_index_usage_stats s
--INNER JOIN sys.indexes i
--	ON i.index_id = s.index_id
--		AND s.object_id = i.object_id
--INNER JOIN sys.objects o
--	ON s.object_id = o.object_id
--INNER JOIN sys.schemas c
--	ON o.schema_id = c.schema_id
--WHERE OBJECTPROPERTY(s.object_id, 'IsUserTable') = 1
--	AND s.database_id = DB_ID()
--	AND i.type_desc = 'nonclustered'
--	AND i.is_primary_key = 0
--	AND i.is_unique_constraint = 0
--	AND (
--		SELECT SUM(p.rows)
--		FROM sys.partitions p
--		WHERE p.index_id = s.index_id
--			AND s.object_id = p.object_id
--		) > 10000
--ORDER BY Reads


--END

--GO


--use master 
--go 
--sp_configure 'show advanced options',1 
--go 
--reconfigure with override 
--go 
--sp_configure 'Database Mail XPs',1 
--go 
--reconfigure 
--go 


--IF NOT EXISTS(SELECT * FROM msdb.dbo.sysmail_profile WHERE  name = 'SQLServer')  
--  BEGIN 
--    EXECUTE msdb.dbo.sysmail_add_profile_sp 
--      @profile_name = 'SQLServer', 
--      @description  = 'SQLServer DB Mail Profile'; 
--  END 
   
--  IF NOT EXISTS(SELECT * FROM msdb.dbo.sysmail_account WHERE  name = 'AUTHENTICATED_DB_MAIL') 
--  BEGIN 
--    EXECUTE msdb.dbo.sysmail_add_account_sp 
--    @account_name            = 'AUTHENTICATED_DB_MAIL', 
--    @email_address           = 'database.mail@sierraspace.com', 
--    @display_name            = 'SierraSpace Database Administration', 
--    @replyto_address         = 'r-dba-team@sierraspace.com', 
--    @description             = 'Database Mail using an authenticated AAD / AD account', 
--    @mailserver_name         = 'smtp.sierraspace.com', 
--    @mailserver_type         = 'SMTP', 
--    @port                    = '587', 
--    @username                = 'SIERRASPACE\database.mail', 
--    @password                = 'hD94m8g37CpJliNkx2J8',  
--    @use_default_credentials =  0 , 
--    @enable_ssl              =  0 ; 
--  END 
   
--IF NOT EXISTS(SELECT * 
--              FROM msdb.dbo.sysmail_profileaccount pa 
--                INNER JOIN msdb.dbo.sysmail_profile p ON pa.profile_id = p.profile_id 
--                INNER JOIN msdb.dbo.sysmail_account a ON pa.account_id = a.account_id   
--              WHERE p.name = 'SQLServer' 
--                AND a.name = 'AUTHENTICATED_DB_MAIL')  

--BEGIN 
--    EXECUTE msdb.dbo.sysmail_add_profileaccount_sp 
--      @profile_name = 'SQLServer', 
--      @account_name = 'AUTHENTICATED_DB_MAIL', 
--      @sequence_number = 1 ; 
--END  




--execute proc
EXEC [sp_unused_indexes]


--Dump proc output into #temp table

SELECT * INTO #unusedindexes
FROM spc_dba_utilities.dbo.dba_unused_indexes_TEMP


DECLARE @CountValue INT
SELECT @CountValue = COUNT(*)
FROM spc_dba_utilities.dbo.dba_unused_indexes_TEMP

--PRINT @CountValue

IF (@CountValue = 0)
BEGIN 

--Declare variables
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)
--DECLARE @xml NVARCHAR(MAX) --XML VARIABLE DECLARED IN ACCOUNTS DETECTED SECTION
DECLARE @blankbody NVARCHAR(MAX)

--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = '[FOR INFORMATION / REVIEW] - Potential Unused Index Report '
SET @CombinedSubject = @ServerName + @MailSubject


SET @blankbody = 'NO UNUSED INDEXES DETECTED ON THE DATABASE

~*~NFAR~*~'

--Trigger the email 
EXEC msdb.dbo.sp_send_dbmail
	@profile_name = 'SQLServer'
--,	@recipients = 'stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com'
,	@recipients = 'stephen.mccord@sierraspace.com'
,	@subject = @MailSubject
,	@body = @blankbody
,   @body_format = 'HTML';

END

ELSE 

BEGIN

-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= '
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #orng {color: orange;}
 #odd {background-color: lightgrey}
</style> </head>';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);


DECLARE @recipients VARCHAR(MAX) = 'stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com; scott.hanks@sierraspace.com; casey.marincin@sierraspace.com; liz.mercado@sierraspace.com' 
--DECLARE @ServerName VARCHAR(255)
--DECLARE @MailSubject VARCHAR(255)
--DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = '[FOR INFORMATION / REVIEW] - Potential Unused Index Report '
SET @CombinedSubject = @ServerName + @MailSubject


 
--get core xml string
SET @xml = CAST(( SELECT 
[Database Name] AS 'td'
,''
,[Object_Name] AS 'td'
,''
,[Index_Name] AS 'td'
,''
,[Reads] AS 'td'
,''
,[Writes] AS 'td'
,''
,[rows] AS 'td'
,''
,[Reads_Per_Writes] AS 'td'
,''
,[Drop_Index_Statement] AS 'td'
,''
,[QueryDate] AS 'td'
,''
FROM  #unusedindexes
ORDER BY [Reads_Per_Writes]
FOR XML PATH('tr'), ELEMENTS ) AS NVARCHAR(MAX));


--EVALUATE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, '<td>zg', '<td id="g">'); -- Green
SET @xml=REPLACE(@xml, '<td>zr', '<td id="r">'); -- Red
SET @xml=REPLACE(@xml, '<td>zorng', '<td id="orng">'); -- Orange

--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''
, @pos = CHARINDEX('<tr>', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, '<tr>', '<tr id="odd">');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX('<tr>', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, '<tr>', '<tr id="odd">');
SET @s += @ts;

--WRITE RESULT SET TO EMAIL BODY
SET @body +=
'<body>
<H3>Potential Unused Indexes</H3>
<BR>
This should be step ONE of the Index Tuning Lifecycle:


<BR><BR>
Indexes are <b>most</b> useful for the retrieval (reading) of data.  The output of this query is SQL Server essentially looking at the statistics of all the queries run since the last server reboot, and outlining 
which indexes have a low read vs. write ratio.  


Utilize the results generated from this process as an indication of where to start dedicating research/development efforts, 
*NOT* as a hard and fast directive to remove the indexes as suggested without further research
<BR><BR>

<BR>
<table border = 1> 
<tr>

<th> DATABASE NAME </th> 
<th> OBJECT NAME </th>
<th> INDEX NAME </th> 
<th> READS </th>
<th> WRITES </th> 
<th> ROWS </th>
<th> READS_PER_WRITES </th> 
<th> DROP_INDEX_STATEMENT </th>
<th> QUERY DATE </th>


</tr>' 
+ @s+'</table> </body> </html>
<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions
<BR><BR><BR><BR>

' ;
 
 --Database Name	Object_Name	Index_Name	Reads	Writes	rows	Reads_Per_Writes	Drop_Index_Statement	QueryDate

EXEC msdb.dbo.sp_send_dbmail
@profile_name = 'SQLServer'
--,@recipients = @recipients
,@recipients = 'stephen.mccord@sierraspace.com' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format ='HTML'
END


DROP TABLE #unusedindexes



USE [master]
GO

/****** Object:  StoredProcedure [dbo].[sp_missing_indexes]    Script Date: 8/28/2024 8:50:46 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--CREATE PROCEDURE [dbo].[sp_missing_indexes]
--AS

--BEGIN 




--/*===================================================================================*/
--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/**************************************************************************************

--This should be step TWO of the Tuning Lifecycle.  

--The first step should be identifying unused indexes within the database, and taking action where necessary to address those indexes.

--The third step in the Tuning Lifecycle is to observe the performance of the added/subtracted indexes, re-run these reports and act accordingly.


--**************************************************************************************/
--/*===================================================================================*/
--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/************************************************************************************** 

--The output of this query is SQL Server essentially looking at the statistics of all the queries run since the last server reboot, and SUGGESTING, 
--"If there was an index here, I might perform a lot better".  

--Bear in mind that none of our servers are regularly rebooted, and there is no other way to clear out the cached statistics that are being referenced

--Understand that each index is another contributor to potential overhead, because SQL Server must maintain each of those indexes internally

--Another example would be if there is an index that covers 3 columns on the table, each single update statement to a field contained within the index 
--is going to require 3 times the disk I/O

--Utilize the results generated from this process as an indication of where to start dedicating research/development efforts, 
--*NOT* as a hard and fast directive to add the indexes suggested without further research

--Column descriptions:

--	Potential_Improvement_Measure - A general statistic illustrating the calculated improvement measure potentially gained by adding the suggested index.  
--							  Considerations include but aren't limited to; disk I/O, physical/virtual memory, network throughput, etc
--							  The higher the number, the greater the potential impact.

--	Average_User_Impact - The average percent benefit that a user query could experience if the suggested index was added. 
--					  The query cost would on average drop by the percentage returned in this column.
				  
--	Table - the fully qualified name of the table (database.schema.table) the suggested index should be implemented on

--	Equality_Columns - the columns in a table that are searched upon frequently using an "equality predicate" (i.e. an equal sign (=))

--	Inequality_Columns - the columns in a table that are searched upon frequently using 
--					 an "inequality predicate" (i.e. greater than/less than signs (<, >))
				 
--	Included_Columns - List of columns suggested to be added as "included columns" to the index.  
--				    A potential performance gain is achieved because the query optimizer can locate all the column values within the index.

--	Create_Index_Statement - After a determination has been made about whether or not to implement the suggested indexes (and included columns), 
--					   the value in this column can be copied and pasted to a query editor window and executed to actually create the suggested index

--**************************************************************************************/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#**#*/
--/*#*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##*##**/
--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
--/*===================================================================================*/


----Clean up temp tables from last invocation
--IF EXISTS (SELECT * FROM spc_dba_utilities.sys.objects WHERE object_id = OBJECT_ID(N'[spc_dba_utilities].[dbo].[Missing_Indexes_TEMP]') AND type in (N'U'))
--BEGIN
--DROP TABLE spc_dba_utilities..dba_missing_indexes_TEMP
--END

--SELECT [Potential_Improvement_Measure] = ROUND((avg_total_user_cost * avg_user_impact) * (user_seeks + user_scans),0)
--	,avg_user_impact as 'Average_User_Impact'
--	,[statement] as 'Table'
--	,mid.equality_columns as 'Equality_Columns'
--	,mid.inequality_columns as 'Inequality_Columns'
--	,mid.included_columns as 'Included_Columns' --Need to determine what the value being returned by this metric actually means
--	,[Create_Index_Statement] = 'CREATE NONCLUSTERED INDEX ix_' + sys.objects.NAME 
--	COLLATE DATABASE_DEFAULT + '_' + REPLACE(REPLACE(REPLACE(ISNULL(mid.equality_columns, '') + ISNULL(mid.inequality_columns, ''), '[', ''), ']', ''), ', ', '_') + ' ON ' + [statement] + ' ( ' + IsNull(mid.equality_columns, '') 

--	+ CASE 
--		WHEN mid.inequality_columns IS NULL
--			THEN ''
--		ELSE CASE 
--				WHEN mid.equality_columns IS NULL
--					THEN ''
--				ELSE ','
--				END + mid.inequality_columns
--		END + ' ) ' + CASE 
--		WHEN mid.included_columns IS NULL
--			THEN ''
--		ELSE 'INCLUDE (' + mid.included_columns + ')'
--		END + ';'
--INTO spc_dba_utilities..dba_missing_indexes_TEMP
--FROM sys.dm_db_missing_index_group_stats AS migs
--INNER JOIN sys.dm_db_missing_index_groups AS mig
--	ON migs.group_handle = mig.index_group_handle
--INNER JOIN sys.dm_db_missing_index_details AS mid
--	ON mig.index_handle = mid.index_handle
--INNER JOIN sys.objects WITH (NOLOCK)
--	ON mid.OBJECT_ID = sys.objects.OBJECT_ID
--WHERE (
--		migs.group_handle IN (
--			SELECT TOP (500) group_handle
--			FROM sys.dm_db_missing_index_group_stats WITH (NOLOCK)
--			ORDER BY (avg_total_user_cost * avg_user_impact) * (user_seeks + user_scans) DESC
--			)
--		)
--	AND OBJECTPROPERTY(sys.objects.OBJECT_ID, 'isusertable') = 1
--ORDER BY [Potential_Improvement_Measure] DESC
--	,[Create_Index_Statement] DESC
	
	
	
--END
--GO




--execute proc
EXEC [sp_missing_indexes]


--Dump proc output into #temp table

SELECT * INTO #missingindexes
FROM spc_dba_utilities.dbo.dba_missing_indexes_TEMP


DECLARE @CountValue INT
SELECT @CountValue = COUNT(*)
FROM spc_dba_utilities.dbo.dba_missing_indexes_TEMP

--PRINT @CountValue

IF (@CountValue = 0)
BEGIN 

--Declare variables
DECLARE @ServerName VARCHAR(255)
DECLARE @MailSubject VARCHAR(255)
DECLARE @CombinedSubject VARCHAR(255)
--DECLARE @xml NVARCHAR(MAX) --XML VARIABLE DECLARED IN ACCOUNTS DETECTED SECTION
DECLARE @blankbody NVARCHAR(MAX)

--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = '[FOR INFORMATION / REVIEW] - Potential Missing Index Report '
SET @CombinedSubject = @ServerName + @MailSubject


SET @blankbody = 'NO MISSING INDEXES DETECTED ON THE DATABASE

~*~NFAR~*~'

--Trigger the email 
EXEC msdb.dbo.sp_send_dbmail
	@profile_name = 'SQLServer'
--,	@recipients = 'stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com'
,	@recipients = 'stephen.mccord@sierraspace.com'
,	@subject = @MailSubject
,	@body = @blankbody
,   @body_format = 'HTML';

END

ELSE 

BEGIN

-- define CSS inside the HTML head section
DECLARE @body VARCHAR(MAX)= '
<html>
<head> <style>
 #g {color: green;}
 #r {color: red;}
 #orng {color: orange;}
 #odd {background-color: lightgrey}
</style> </head>';
 
DECLARE @i INT = 0
, @pos INT
, @s VARCHAR(MAX)
, @ts VARCHAR(MAX)
, @xml VARCHAR(MAX);


DECLARE @recipients VARCHAR(MAX) = 'stephen.mccord@sierraspace.com; joshua.grasso@sierraspace.com; scott.hanks@sierraspace.com; casey.marincin@sierraspace.com; liz.mercado@sierraspace.com' 
--DECLARE @ServerName VARCHAR(255)
--DECLARE @MailSubject VARCHAR(255)
--DECLARE @CombinedSubject VARCHAR(255)


--Set variables
SET @ServerName =  @@SERVERNAME
SET @MailSubject = '[FOR INFORMATION / REVIEW] - Potential Missing Index Report '
SET @CombinedSubject = @ServerName + @MailSubject


 
--get core xml string
SET @xml = CAST(( SELECT 
[Table] AS 'td'
,''
,[Equality_Columns] AS 'td'
,''
,[Inequality_Columns] AS 'td'
,''
,[Included_Columns] AS 'td'
,''
FROM  #missingindexes
ORDER BY [Table]
FOR XML PATH('tr'), ELEMENTS ) AS NVARCHAR(MAX));


--EVALUATE CASE STATEMENT.  COLOR TEXT FONT ACCORDINGLY. 
SET @xml=REPLACE(@xml, '<td>zg', '<td id="g">'); -- Green
SET @xml=REPLACE(@xml, '<td>zr', '<td id="r">'); -- Red
SET @xml=REPLACE(@xml, '<td>zorng', '<td id="orng">'); -- Orange

--ZEBRA STRIPE THE ROWS IN THE RESULT SET 
SELECT @s = ''
, @pos = CHARINDEX('<tr>', @xml, 4);
 
WHILE(@pos > 0)
BEGIN
   SET @i += 1;
   SET @ts = SUBSTRING(@xml, 1, @pos-1)
   IF(@i % 2 = 1)
      set @ts = REPLACE(@ts, '<tr>', '<tr id="odd">');
   SET @s += @ts;
   SET @xml = SUBSTRING(@xml, @pos, LEN(@xml));
   SET @pos =  CHARINDEX('<tr>', @xml, 4);
END -- while
-- handling the last piece
SET @i +=1;
SET @ts = @xml;
IF(@i % 2 = 1)
   SET @ts = REPLACE(@ts, '<tr>', '<tr id="odd">');
SET @s += @ts;

--WRITE RESULT SET TO EMAIL BODY
SET @body +=
'<body>
<H3>Potential Missing Indexes</H3>
<BR>
This should be step TWO of the Index Tuning Lifecycle:


<BR><BR>
The output of this query is SQL Server essentially looking at the statistics of all the queries run since the last server reboot, and <b>suggesting</b>, 
"<i>If there was an index on the object identified, queries might perform a lot more efficiently</i>."  

<BR><BR>
Utilize the results generated from this process as an indication of where to start dedicating research/development efforts, 
<b>not</b> as a hard and fast directive to remove the indexes as suggested without further research
<BR><BR>

<BR>
<table border = 1> 
<tr>

<th> TABLE NAME </th> 
<th> EQUALITY COLUMNS </th>
<th> INEQUALITY COLUMNS </th> 
<th> INCLUDED COLUMNS </th>


</tr>' 
+ @s+'</table> </body> </html>
<BR><BR>
Regards,
<BR>
SierraSpace Database Solutions
<BR><BR><BR><BR>

' ;
 
 --Table Name, Equality Columns, Inequality Columns, Included Columns

EXEC msdb.dbo.sp_send_dbmail
@profile_name = 'SQLServer'
--,@recipients = @recipients
,@recipients = 'stephen.mccord@sierraspace.com' --DEBUGGING
,@subject = @MailSubject
,@body = @body
,@body_format ='HTML'
END


DROP TABLE #missingindexes







--use [spc_edw]
--go

--exec sp_unused_indexes
--GO
--exec sp_missing_indexes
--GO


select * from spc_dba_utilities..Unused_Indexes_TEMP
go

--select [Table]
--, [Equality_Columns]
--, [Inequality_Columns]
--, [Included_Columns] 
--from spc_dba_utilities..dba_unused_indexes_TEMP
--where [Table] NOT LIKE '%master%.%'
--and [Table] NOT LIKE '%tempdb%.%'
--and [Table] NOT LIKE '%msdb%.%'
--and [Table] NOT LIKE '%model%.%'
--and [Table] NOT LIKE '%spc_dba_utilities%.%'
--go






